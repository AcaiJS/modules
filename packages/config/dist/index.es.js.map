{"version":3,"file":"index.es.js","sources":["../src/modules/config.ts","../src/index.ts"],"sourcesContent":["// Packages\r\nimport { existsSync, readFileSync } from \"fs\"\r\nimport { join } from \"path\"\r\n\r\n// Interfaces\r\nimport storageTypes from \"../interfaces/types\"\r\n\r\nexport default class ConfigClass {\r\n\t// -------------------------------------------------\r\n\t// Properties\r\n\t// -------------------------------------------------\r\n\r\n\tprotected data\t: Record<string, any> = {};\r\n\tprotected _env\t: Record<string, string | undefined> = {};\r\n\r\n\t// -------------------------------------------------\r\n\t// Config methods\r\n\t// -------------------------------------------------\r\n\r\n\t/**\r\n\t * Raw config object, you can set properties and they will be kept\r\n\t */\r\n\tpublic get config () {\r\n\t\treturn this.data\r\n\t}\r\n\r\n\t/**\r\n\t * ## getConfig\r\n\t * Retrieves information from the config value\r\n\t *\r\n\t * @param {string} key nested key that can be used to retrieve data\r\n\t * @param {any?} defaultValue default value in case the key doesn't match\r\n\t * @returns {any}\r\n\t */\r\n\tpublic getConfig <T extends storageTypes = string> (key: string, defaultValue?: T): T {\r\n\t\treturn (this.data[key] || defaultValue) as unknown as T\r\n\t}\r\n\r\n\t/**\r\n\t * ## setConfig\r\n\t * Sets information from the config value\r\n\t *\r\n\t * @param {string} key nested key that can be used to retrieve data\r\n\t * @param {any} value value to be placed\r\n\t * @returns {any}\r\n\t */\r\n\tpublic setConfig (key: string, value: storageTypes) {\r\n\t\tthis.data[key] = value\r\n\t}\r\n\r\n\t// -------------------------------------------------\r\n\t// Env methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic get env () {\r\n\t\treturn this._env\r\n\t}\r\n\r\n\tpublic getEnv (key: string, defaultValue?: string) {\r\n\t\treturn this._env[key] || defaultValue\r\n\t}\r\n\r\n\t/**\r\n\t * ## fetchEnv\r\n\t *\r\n\t * Method responsible for finding an env file inside of of your project\r\n\t *\r\n\t * @param {string?} preference Env preference, such as production, testing, etc\r\n\t * @param {boolean?} injectIntoConfig Should the env variables be injected into the config as well\r\n\t * @param {boolean?} suppresLog Suppress any errors when trying to fetch the env file\r\n\t */\r\n\tpublic async fetchEnv (preference: string | undefined = undefined, injectIntoConfig = false, suppresLog = false) {\r\n\t\t// get data\r\n\t\tlet file = join(process.cwd(), `.env${ preference ? `.${preference}`:\"\" }`)\r\n\r\n\t\t// fetch env from deno\r\n\t\tthis._env = process.env\r\n\r\n\t\t// check preference, if not, fallback\r\n\t\tif (preference) {\r\n\t\t\tif (!await existsSync(file)) {\r\n\t\t\t\tif (!suppresLog) console.log(`.env${preference ? `.${preference}`:\"\"} not found, falling back into .env`)\r\n\t\t\t\tfile = join(process.cwd(), \".env\")\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// check file exists\r\n\t\tif (await existsSync(file)) {\r\n\t\t\t// fetch into env\r\n\t\t\tconst text = await readFileSync(file, \"utf-8\")\r\n\t\t\ttext.split(\"\\n\").forEach(i => {\r\n\t\t\t\tconst [key, value] \t= i.split(\"=\")\r\n\t\t\t\tthis._env[key] \t\t= value\r\n\t\t\t})\r\n\r\n\t\t\t// inject env variables into the config\r\n\t\t\tif (injectIntoConfig) {\r\n\t\t\t\tObject.keys(this._env).forEach(key => {\r\n\t\t\t\t\tthis.config[key] = this._env[key]\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!suppresLog) {\r\n\t\t\tconsole.warn(\"ENV file not found\")\r\n\t\t}\r\n\t}\r\n}","import configModule from \"./modules/config\"\r\n\r\nexport const createConfig = () => new configModule()\r\nconst instance = new configModule()\r\nexport default instance\r\n"],"names":[],"mappings":";;;;;;;;AAOA,wBAAiC;AAAA,EAAjC,cAPA;AAYW,gBAA6B;AAC7B,gBAA4C;AAAA;AAAA,MAS3C,SAAU;AACpB,WAAO,KAAK;AAAA;AAAA,EAWN,UAA6C,KAAa,cAAqB;AACrF,WAAQ,KAAK,KAAK,QAAQ;AAAA;AAAA,EAWpB,UAAW,KAAa,OAAqB;AACnD,SAAK,KAAK,OAAO;AAAA;AAAA,MAOP,MAAO;AACjB,WAAO,KAAK;AAAA;AAAA,EAGN,OAAQ,KAAa,cAAuB;AAClD,WAAO,KAAK,KAAK,QAAQ;AAAA;AAAA,QAYb,SAAU,aAAiC,QAAW,mBAAmB,OAAO,aAAa,OAAO;AAEhH,QAAI,OAAO,KAAK,QAAQ,OAAO,OAAQ,aAAa,IAAI,eAAa;AAGrE,SAAK,OAAO,QAAQ;AAGpB,QAAI,YAAY;AACf,UAAI,CAAC,MAAM,WAAW,OAAO;AAC5B,YAAI,CAAC;AAAY,kBAAQ,IAAI,OAAO,aAAa,IAAI,eAAa;AAClE,eAAO,KAAK,QAAQ,OAAO;AAAA;AAAA;AAK7B,QAAI,MAAM,WAAW,OAAO;AAE3B,YAAM,OAAO,MAAM,aAAa,MAAM;AACtC,WAAK,MAAM,MAAM,QAAQ,OAAK;AAC7B,cAAM,CAAC,KAAK,SAAU,EAAE,MAAM;AAC9B,aAAK,KAAK,OAAS;AAAA;AAIpB,UAAI,kBAAkB;AACrB,eAAO,KAAK,KAAK,MAAM,QAAQ,SAAO;AACrC,eAAK,OAAO,OAAO,KAAK,KAAK;AAAA;AAAA;AAAA,eAIvB,CAAC,YAAY;AACrB,cAAQ,KAAK;AAAA;AAAA;AAAA;;;ICrGH,eAAe,MAAM,IAAI;AACtC,IAAM,WAAW,IAAI;IACd,cAAQ;;"}