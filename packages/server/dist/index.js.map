{"version":3,"file":"index.js","sources":["../src/utils/deepMerge.ts","../src/exceptions/adapterNotFound.ts","../src/exceptions/portOccupied.ts","../src/exceptions/routeNotFound.ts","../src/adapters/http/utils/respond.ts","../src/utils/censor.ts","../src/adapters/http/utils/response.ts","../src/adapters/http/index.ts","../src/exceptions/controllerNotFound.ts","../src/utils/findController.ts","../src/utils/safeHandle.ts","../src/exceptions/middlewareNotFound.ts","../src/classes/MiddlewareHandler.ts","../src/classes/AdapterHandler.ts","../src/utils/instanciable.ts","../src/modules/server.ts","../src/index.ts"],"sourcesContent":["const isObject = (item: unknown) => (item && typeof item === \"object\" && !Array.isArray(item))\n\nexport default function deepMerge (obj1: any, obj2: any) {\n\tconst output = Object.assign({}, obj1)\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tObject.keys(obj2).forEach(key => {\n\t\t\tif (isObject(obj2[key])) {\n\t\t\t\tif (!(key in obj1))\n\t\t\t\t\tObject.assign(output, { [key]: obj2[key] })\n\t\t\t\telse\n\t\t\t\t\toutput[key] = deepMerge(obj1[key], obj2[key])\n\t\t\t} else {\n\t\t\t\tObject.assign(output, { [key]: obj2[key] })\n\t\t\t}\n\t\t})\n\t}\n\treturn output\n}\n","// Packages\nimport { CustomException } from \"@acai/utils\"\n\nexport default class AdapterNotFound extends CustomException {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\t// Custom settings\n\tpublic adapter: string;\n\n\t// Base class override\n\tpublic critical = true;\n\tpublic shouldReport = true;\n\tpublic shouldSerialize = true;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic constructor (adapterName: string) {\n\t\tsuper(\"server.adapter\", `Adapter ${adapterName} was not found when initializing server`)\n\t\tthis.adapter = adapterName\n\t}\n}","// Packages\nimport { CustomException } from \"@acai/utils\"\n\nexport default class PortOccupied extends CustomException {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\t// Custom settings\n\tpublic port: number;\n\n\t// Base class override\n\tpublic critical = true;\n\tpublic shouldReport = true;\n\tpublic shouldSerialize = true;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic constructor (portOccupied: number) {\n\t\tsuper(\"server.port\", `Port ${portOccupied} is already being used`)\n\t\tthis.port = portOccupied\n\t}\n}","// Packages\nimport { CustomException } from \"@acai/utils\"\n\nexport default class RouteNotFound extends CustomException {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\t// Custom settings\n\tpublic route: string;\n\tpublic method: string;\n\n\t// Base class override\n\tpublic status = 403;\n\tpublic critical = false;\n\tpublic shouldReport = false;\n\tpublic shouldSerialize = false;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic constructor (route: string, method: string) {\n\t\tsuper(\"adapter.route\", `Route ${method}:\"${route}\" not found`)\n\t\tthis.route = route\n\t\tthis.method = method\n\t}\n}","// Interfaces\nimport { ServerResponse }\t\tfrom \"http\"\nimport { ResponseInterface }\tfrom \"@acai/interfaces\"\n\nexport default function respond (res: ServerResponse, { body, headers, status }: ResponseInterface = {}) {\n\t// Status\n\tif (status)\tres.statusCode = status\n\n\t// Set headers\n\tif (headers) {\n\t\tObject.keys(headers).forEach((k) => {\n\t\t\tif (k !== \"content-length\")\n\t\t\t\tres.setHeader(k, headers[k] as string)\n\t\t})\n\t}\n\n\t// Set body\n\tif (body) res.write(typeof body === \"string\" ? body : JSON.stringify(body) || \"\")\n\n\t// respond to server\n\tres.end()\n}","export default function simpleStringify (object) {\n\tif (object && typeof object === \"object\") {\n\t\tobject = copyWithoutCircularReferences([object], object)\n\t}\n\treturn JSON.stringify(object)\n\n\tfunction copyWithoutCircularReferences(references, object) {\n\t\tconst cleanObject = {}\n\t\tObject.keys(object).forEach(function(key) {\n\t\t\tconst value = object[key]\n\t\t\tif (value && Array.isArray(value)) {\n\t\t\t\tcleanObject[key] = value\n\t\t\t}\n\t\t\telse if (value && typeof value === \"object\") {\n\t\t\t\tif (references.indexOf(value) < 0) {\n\t\t\t\t\treferences.push(value)\n\t\t\t\t\tcleanObject[key] = copyWithoutCircularReferences(references, value)\n\t\t\t\t\treferences.pop()\n\t\t\t\t} else {\n\t\t\t\t\tcleanObject[key] = \"###_Circular_###\"\n\t\t\t\t}\n\t\t\t} else if (typeof value !== \"function\") {\n\t\t\t\tcleanObject[key] = value\n\t\t\t}\n\t\t})\n\t\treturn cleanObject\n\t}\n}","// Packages\r\nimport * as path \t\t\t\tfrom \"path\"\r\nimport * as fs \t\t\t\t\tfrom \"fs\"\r\n\r\n// Interfaces\r\nimport { ResponseInterface } from \"@acai/interfaces\"\r\nimport RequestInterface, { ICustomIncomingMessage } from \"../../../interfaces/httpServerRequest\"\r\n\r\n// Utils\r\nimport censor from \"../../../utils/censor\"\r\n\r\nexport default async function smartResponse (payload: [string | RequestInterface | ResponseInterface | Record<string, unknown> | (() => any), any], request: ICustomIncomingMessage, viewPrefix?: string) {\r\n\tconst headers = {} as Record<string, any>\r\n\tlet body \t= \"\" as string | Record<string, unknown>\r\n\tlet status \t= 200\r\n\r\n\t// prepare headers\r\n\tObject.keys(request.headers).forEach((k) => {\r\n\t\tif (k !== \"content-length\") headers[k] = request.headers[k]\r\n\t})\r\n\r\n\t// merge later headers\r\n\tObject.keys(payload[1]?.headers || {}).forEach((k) => {\r\n\t\tif (k !== \"content-length\") headers[k] = payload[1].headers[k]\r\n\t})\r\n\r\n\t// prepare content\r\n\tif (typeof payload[0] === \"function\" && (payload[0] as unknown as {utility: string}).utility === \"response\") {\r\n\t\tconst data \t= payload[0]()\r\n\t\tstatus \t\t= data.status || 200\r\n\t\tbody\t\t= (data.body as string) || \"\"\r\n\r\n\t\t// bind headers\r\n\t\tif (data.headers) {\r\n\t\t\tObject.keys(data.headers).forEach(key => {\r\n\t\t\t\theaders[key] = data.headers[key]\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// import view file\r\n\t\tif (data.view) {\r\n\t\t\tbody = fs.readFileSync(path.join(`${process.cwd()}`, viewPrefix || \"\", data.view), {\r\n\t\t\t\tencoding: \"utf-8\",\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tbody = payload[0] as string | Record<string, unknown>\r\n\t}\r\n\r\n\tif (typeof body === \"object\") {\r\n\t\theaders[\"Accept\"]\t\t= \"application/json\"\r\n\t\theaders[\"Content-Type\"] = \"application/json\"\r\n\r\n\t\tif (body.toObject && typeof body.toObject === \"function\") {\r\n\t\t\tbody = body.toObject()\r\n\t\t}\r\n\t}\r\n\telse if (!headers[\"Content-Type\"]) {\r\n\t\theaders[\"Accept\"]\t\t= \"text/plain\"\r\n\t\theaders[\"Content-Type\"] = \"text/plain\"\r\n\t}\r\n\r\n\t// respond\r\n\treturn {\r\n\t\tbody: typeof body === \"object\" ? censor(body) : body,\r\n\t\theaders,\r\n\t\tstatus,\r\n\t}\r\n}","// Packages\nimport * as http from \"http\"\nimport { router, route } from \"@acai/router\"\n\n// Interfaces\nimport { AdapterInterface, SerializedAdapterInterface } from \"@acai/interfaces\"\n\n// Exceptions\nimport PortOccupied from \"../../exceptions/portOccupied\"\nimport RouteNotFound from \"../../exceptions/routeNotFound\"\n\n// Utils\nimport respond from \"./utils/respond\"\nimport smartResponse from \"./utils/response\"\n\nexport default class HttpAdapter implements AdapterInterface {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\tprotected conn: http.Server;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic async boot (config: SerializedAdapterInterface[\"config\"]) {\n\t\tconst hostname = config.hostname || \"localhost\"\n\t\tconst port = config.port || 3000\n\n\t\tthis.conn\t= http.createServer()\n\n\t\tthis.conn.listen(port, hostname)\n\n\t\tthis.conn.on(\"error\", (err: Error & {code: string}) => {if (err.code === \"EADDRINUSE\") throw new PortOccupied(port || 3000)})\n\n\t\tawait new Promise(r => void this.conn.on(\"listening\", () => r(true)))\n\n\t\tif (process.env.testing !== \"true\")\n\t\t\tconsole.log(`Server running on ${hostname}:${port}`)\n\n\t\treturn true\n\t}\n\n\tpublic async shutdown () {\n\t\tif (this.conn.listening) {\n\t\t\tawait new Promise(r => this.conn.close(r))\n\t\t}\n\t}\n\n\tpublic onRequest: AdapterInterface[\"onRequest\"] = async (makeRequest, requestSafeThread) => {\n\t\tthis.conn.on(\"request\", async (req, res) => {\n\t\t\tconst response = await requestSafeThread(async () => {\n\t\t\t\tconst url = req.url || \"\"\n\t\t\t\tconst match = this.getMatch(url || \"\", req)\n\n\t\t\t\tif (!match) throw new RouteNotFound(url.split(\"?\")[0], req.method || \"\")\n\n\t\t\t\tconst request = {...match, ...this.getParsedRequest(req)}\n\t\t\t\tconst file = req.method === \"OPTIONS\" ? () => \"\" : match.controller\n\n\t\t\t\treturn await makeRequest(request, file, match.middlewares)\n\t\t\t})\n\n\t\t\tconst parsedResponse = await smartResponse(response, req as any)\n\t\t\trespond(res, parsedResponse)\n\t\t})\n\t}\n\n\t// -------------------------------------------------\n\t// Helper methods\n\t// -------------------------------------------------\n\n\tprotected getParsedRequest (req: http.IncomingMessage) {\n\t\tconst [ path ] = (req.url || \"\").split(\"?\")\n\t\tconst headers = Object.keys(req.headers).reduce((prev, curr) => ({...prev, [curr.toLowerCase()]: req.headers[curr]}), {})\n\n\t\t// gather all data\n\t\tconst request = {raw: () => req, headers, method: req.method!, status: req.statusCode, url: path, body: {}}\n\n\t\treturn request\n\t}\n\n\tprotected getMatch (path: string, req: http.IncomingMessage) {\n\t\tconst match = router(path, req.method as any, route.build(false))\n\n\t\t// route not found\n\t\tif (!match) return\n\n\t\tconst { file, options, variables, query } = match\n\n\t\treturn match ? {\n\t\t\tcontroller: file,\n\t\t\tmiddlewares: (options.middleware || []) as string[],\n\t\t\tparams: variables as Record<string, string>,\n\t\t\tquery,\n\t\t} : undefined\n\t}\n\n\tpublic getPath (prepath: string) {\n\t\tconst [ path ] = prepath.split(\"?\")\n\n\t\treturn path\n\t}\n}","// Packages\nimport { CustomException } from \"@acai/utils\"\n\nexport default class ControllerNotFoundException extends CustomException {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\t// Custom settings\n\tpublic controller: string;\n\tpublic route: string;\n\tpublic method?: string;\n\n\t// Base class override\n\tpublic critical = false;\n\tpublic shouldReport = true;\n\tpublic shouldSerialize = false;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic constructor (controller: string, route: string, method?: string) {\n\t\tsuper(\"adapter.route.controller\", `Method ${method} of the controller ${controller} in the route ${route} was not found`, { controller, route, method })\n\n\t\tif (method) this._message = `Method ${method} of the controller ${controller} in the route ${route} was not found`\n\t\telse this._message = `Controller ${controller} for route ${route} not found`\n\n\t\tthis.controller = controller\n\t\tthis.route = route\n\t\tthis.method = method\n\t}\n\n\tpublic render () {\n\t\treturn this.message\n\t}\n}","// Packages\r\nimport { CustomException } from \"@acai/utils\"\r\nimport * as fs from \"fs\"\r\nimport * as path from \"path\"\r\n\r\n// Exceptions\r\nimport ControllerNotFoundException from \"../exceptions/controllerNotFound\"\r\n\r\n// -------------------------------------------------\r\n// Helper methods\r\n// -------------------------------------------------\r\n\r\nconst exists = (path: string) => fs.promises.access(path).then(() => true).catch(() => false)\r\n\r\nasync function findFile (filepath: string): Promise<string | undefined> {\r\n\tconst [ name, ...dirpath ] = filepath.split(/(\\/|\\\\)/).reverse()\r\n\tconst dir = path.join(...dirpath.reverse())\r\n\r\n\tif (!(await exists(dir))) return\r\n\r\n\tconst files = await fs.promises.readdir(dir, { withFileTypes: true })\r\n\r\n\tfor (let i = 0; i < files.length; i++) {\r\n\t\tif (files[i].isFile() && files[i].name.match(new RegExp(`^${name}`)))\r\n\t\t\treturn path.join(dir, files[i].name)\r\n\t}\r\n\r\n\treturn undefined\r\n}\r\n\r\n// -------------------------------------------------\r\n// Main method\r\n// -------------------------------------------------\r\n\r\nexport default async function findController(controllerPath: string | ((req: any) => any), route: string) {\r\n\t// controller itself is the callback\r\n\tif (typeof controllerPath !== \"string\") {\r\n\t\treturn controllerPath\r\n\t}\r\n\r\n\tconst [controller, method] = controllerPath.split(\"@\")\r\n\tconst pathString = await findFile(path.join(process.cwd(), controller)) || controller\r\n\tconst sanitizedControllerPath = pathString.split(/(\\\\|\\/)/).reverse()[0].split(\"@\")[0]\r\n\r\n\t// controller requested doesn't exist\r\n\tif (!pathString || !exists(pathString)) {\r\n\t\tthrow new ControllerNotFoundException(sanitizedControllerPath, route)\r\n\t}\r\n\r\n\tconst file = (await import(pathString)).default\r\n\r\n\t// check if controller is a valid object\r\n\tif (typeof file === \"object\" && !method) {\r\n\t\tthrow new CustomException(\"controller\", `Controller (${controller}) is a object but a method was not passed`)\r\n\t}\r\n\t// check if controller is a valid object\r\n\tif (typeof file === \"object\" && method && !file[method]) {\r\n\t\tthrow new CustomException(\"controller\", `Controller (${controller}) did not provide a property for the method ${method}`)\r\n\t}\r\n\t// check if controller is a valid class\r\n\telse if (typeof file === \"function\" && Object.getOwnPropertyNames(file.prototype).length > 1 && !method) {\r\n\t\tthrow new CustomException(\"controller\", `Controller (${controller}) is a class but you are trying to access it as a function`)\r\n\t}\r\n\t// check if controller is a valid class\r\n\telse if (typeof file === \"function\" && Object.getOwnPropertyNames(file.prototype).length > 1 && method && !file.prototype[method]) {\r\n\t\tconsole.log(Object.getOwnPropertyNames(file.prototype), file)\r\n\t\tthrow new CustomException(\"controller\", `Controller (${controller}) did not provide a property for the method ${method} or it was an arrow function (sadly we do not support them)`)\r\n\t}\r\n\t// check if controller is a valid callback\r\n\telse if (typeof file === \"function\" && method && Object.getOwnPropertyNames(file.prototype).length === 1) {\r\n\t\tthrow new CustomException(\"controller\", `Controller (${controller}) is a callback but you are trying to access it as a class`)\r\n\t}\r\n\r\n\treturn async (request) => {\r\n\t\t// controller is a class or a function\r\n\t\tif (file.prototype?.constructor && typeof file.prototype?.constructor === \"function\") {\r\n\t\t\tif (Object.getOwnPropertyNames(file.prototype).length > 1) {\r\n\t\t\t\tconst instance = new file(request)\r\n\t\t\t\treturn instance[method].bind(instance)(request)\r\n\t\t\t}\r\n\r\n\t\t\treturn file(request)\r\n\t\t}\r\n\r\n\t\t// controller should be an object\r\n\t\tif (method) return file[method].bind(file)(request)\r\n\r\n\t\treturn file\r\n\t}\r\n}","// Packages\nimport { exceptionLog } from \"@acai/utils\"\n\n// Interfaces\nimport { CustomExceptionInterface }\tfrom \"@acai/interfaces\"\n\n// Modules\nimport AdapterHandler from \"../classes/AdapterHandler\"\n\nfunction usePreserve (value: CustomExceptionInterface[\"preserve\"] | undefined, originalRequest: any, flowRequest: any, globalRequest: any) {\n\tswitch (value) {\n\t\tdefault:\n\t\tcase \"all\":\n\t\t\treturn flowRequest\n\t\tcase \"global\":\n\t\t\treturn globalRequest\n\t\tcase \"none\":\n\t\t\treturn originalRequest\n\t}\n}\n\nexport default async function safeHandle <Request = any>(callback: (... args: any[]) => any | Promise<any>, handler: AdapterHandler, request?: Request, globalRequest?: Request) {\n\ttry {\n\t\tconst response = await callback()\n\t\treturn response\n\t}\n\tcatch (e) {\n\t\tconst error = e as CustomExceptionInterface\n\t\tconst useRequest = usePreserve(error.preserve, request, error.request, globalRequest)\n\t\tdelete error.request\n\n\t\t// check if provider is going to handle errors\n\t\tconst response = await handler.onException(e as any, useRequest)\n\n\t\t// if providers don't handle error, fallback to default handling\n\t\tif (response === undefined) {\n\t\t\t// print to console\n\t\t\tif (error.shouldReport !== false && process.env.testing !== \"true\") {\n\t\t\t\tif (error.report) error.report({ error, server: handler.adapter, request: useRequest })\n\t\t\t\telse exceptionLog(error.message, error.stack?.split(\"\\n\"), error.data)\n\t\t\t}\n\t\t}\n\n\t\t// critical errors should force adapter to shutdown\n\t\tif (error.critical) {\n\t\t\tawait handler.shutdown()\n\t\t\tprocess.exit(1)\n\t\t}\n\n\t\t// providers handled response to user\n\t\tif (response !== undefined) return response\n\n\t\t// response from the error\n\t\tif (error.render) return [error.render({ error, server: handler.adapter, request: useRequest}), useRequest, error]\n\n\t\t// response from message\n\t\treturn [error.message || \"\", useRequest, error]\n\t}\n}\n","// Packages\nimport { CustomException } from \"@acai/utils\"\n\nexport default class MiddlewareNotFound extends CustomException {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\t// Custom settings\n\tpublic middleware: string;\n\tpublic route: string;\n\n\t// Base class override\n\tpublic critical = false;\n\tpublic shouldReport = true;\n\tpublic shouldSerialize = false;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic constructor (middleware: string, route: string) {\n\t\tsuper(\"server.middleware\", `Middleware ${middleware} was not found for route ${route}`)\n\t\tthis.middleware = middleware\n\t\tthis.route = route\n\t}\n}","import { MiddlewareCbType, MiddlewareClassType, MiddlewareType, ServerRequest } from \"@acai/interfaces\"\n\ntype ConstructableMiddleware = [MiddlewareType, string[] | undefined]\n\nexport default class MiddlewareHandler {\n\tprivate middlewares: ConstructableMiddleware[] = [];\n\n\tpublic constructor(md?: ConstructableMiddleware | ConstructableMiddleware[]) {\n\t\tif (md) this.add(md)\n\t}\n\n\tpublic add(md: ConstructableMiddleware | ConstructableMiddleware[]) {\n\t\tif (md.length > 0) {\n\t\t\tif (Array.isArray(md[0])) this.middlewares = [...this.middlewares, ...(md as ConstructableMiddleware[])]\n\t\t\telse this.middlewares = [...this.middlewares, md as ConstructableMiddleware]\n\t\t}\n\n\t\treturn this\n\t}\n\n\tpublic clear() {\n\t\tthis.middlewares = []\n\t}\n\n\tpublic async pipe(request: ServerRequest) {\n\t\tif (this.middlewares.length === 0) return [request, request]\n\n\t\tconst lastrequest = request\n\t\tconst stack = [] as any[]\n\n\t\tfor (let i = 0; i < this.middlewares.length; i++) {\n\t\t\tconst curr = this.middlewares[i]\n\n\t\t\tstack.push(async (r: ServerRequest) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await this.buildCallback(curr[0])(\n\t\t\t\t\t\t(await r)[0],\n\t\t\t\t\t\tasync (r) => await (stack[i + 1] || ((r: ServerRequest) => r))([await r]),\n\t\t\t\t\t\tcurr[1] || [],\n\t\t\t\t\t)\n\n\t\t\t\t\treturn response\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\t(e as any).request = r[0]\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (stack.length) return stack[0]([lastrequest])\n\t\treturn lastrequest\n\t}\n\n\tprotected buildCallback (middleware: MiddlewareType) {\n\t\tif ((middleware as MiddlewareClassType).onApply) {\n\t\t\treturn (middleware as MiddlewareClassType).onApply.bind(middleware)\n\t\t}\n\n\t\treturn middleware as MiddlewareCbType\n\t}\n}","// Interfaces\nimport { CustomExceptionInterface, SerializedAdapterInterface } from \"@acai/interfaces\"\n\n// Utils\nimport findController from \"../utils/findController\"\nimport safeHandle from \"../utils/safeHandle\"\n\n// Exceptions\nimport MiddlewareNotFound from \"../exceptions/middlewareNotFound\"\n\n// Classes\nimport MiddlewareHandler from \"./MiddlewareHandler\"\n\n\nexport default class AdapterHandler {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\tpublic readonly adapter: SerializedAdapterInterface\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tpublic constructor (adapter: SerializedAdapterInterface) {\n\t\tthis.adapter = adapter\n\t}\n\n\tpublic async boot () {\n\t\t// Setup providers\n\t\tfor (let i = 0; i < this.adapter.providers.length; i++) {\n\t\t\tconst provider = this.adapter.providers[i]\n\n\t\t\tawait safeHandle(() => provider.boot && provider.boot(this.adapter), this)\n\t\t}\n\n\t\t// Boot adapter\n\t\tawait safeHandle(() => this.adapter.adapter.boot(this.adapter.config), this)\n\n\t\t// Setup request callback\n\t\tawait safeHandle(\n\t\t\t() => this.adapter.adapter.onRequest(\n\t\t\t\tthis.onRequest.bind(this),\n\t\t\t\tasync (cb) => await safeHandle(\n\t\t\t\t\t() => cb(),\n\t\t\t\t\tthis,\n\t\t\t\t),\n\t\t\t),\n\t\t\tthis,\n\t\t)\n\t}\n\n\tpublic async shutdown () {\n\t\t// Shutdown providers\n\t\tfor (let i = 0; i < this.adapter.providers.length; i++) {\n\t\t\tconst provider = this.adapter.providers[i]\n\n\t\t\tif (provider.shutdown) await provider.shutdown(this.adapter)\n\t\t}\n\n\t\t// Turn off adapter\n\t\tthis.adapter.adapter.shutdown()\n\t}\n\n\tpublic async onException (error: CustomExceptionInterface, request?: any) {\n\t\t// Check provider handle\n\t\tfor (let i = 0; i < this.adapter.providers.length; i++) {\n\t\t\tconst provider = this.adapter.providers[i]\n\t\t\tconst response = provider.onError && await provider.onError({error, server: this.adapter, request})\n\n\t\t\tif (response) return [response, request]\n\t\t}\n\n\t\treturn undefined\n\t}\n\n\tpublic async onRequest (request: any, precontroller: string | ((...args: any[]) => any), middlewareNames: string[] = []) {\n\t\tconst controller = await safeHandle(async () => {\n\t\t\t// Get controller method\n\t\t\treturn typeof precontroller === \"string\" ? await findController( `${this.adapter.config.filePrefix || \"\"}/${precontroller}`, request.route) : precontroller\n\t\t}, this, request)\n\n\t\tconst globalsresponse = await safeHandle(async () => {\n\t\t\t// gather compose middlewares\n\t\t\tconst globals = this.adapter.globals.map(item => [item, undefined])\n\n\t\t\t// Pass through middlewares\n\t\t\tconst composition = new MiddlewareHandler(globals as any)\n\t\t\treturn composition.pipe(request)\n\t\t}, this, request, request)\n\n\t\tif (!Array.isArray(globalsresponse)) return [globalsresponse]\n\t\tif (globalsresponse.length === 3) return globalsresponse\n\n\t\tconst middlewaresresponse = await safeHandle(async () => {\n\t\t\t// check if all middlewares are available\n\t\t\tmiddlewareNames.map(name => name.split(\":\")[0]).forEach(name => { if (!this.adapter.middlewares[name]) throw new MiddlewareNotFound(name, `${precontroller}`) })\n\n\t\t\t// gather compose middlewares\n\t\t\tconst middlewares = middlewareNames.map(name => name.split(\":\")).map(([name, ...data]) => [this.adapter.middlewares[name], (data || \"\").join(\":\").split(\",\")])\n\n\t\t\t// Pass through middlewares\n\t\t\tconst composition = new MiddlewareHandler(middlewares as any)\n\t\t\treturn composition.pipe(globalsresponse[0])\n\t\t}, this, request, globalsresponse)\n\n\t\tif (!Array.isArray(middlewaresresponse)) return [middlewaresresponse]\n\t\tif (middlewaresresponse.length === 3) return middlewaresresponse\n\n\t\treturn [await controller(middlewaresresponse[0]), middlewaresresponse[0]]\n\t}\n}","export default function instanciable (income: any) {\n\tif (!income) return {}\n\n\tif (income.constructor && income.prototype?.constructor === income) return new income()\n\n\treturn income\n}","// Interfaces\r\nimport { AdapterInterface, ClassType, SerializedAdapterInterface } from \"@acai/interfaces\"\r\nimport { ProviderInterface, MiddlewareType } from \"@acai/interfaces\"\r\nimport { ServerConfigInterface, ServerInterface } from \"@acai/interfaces\"\r\n\r\n// Utils\r\nimport deepMerge from \"../utils/deepMerge\"\r\n\r\n// Exceptions\r\nimport AdapterNotFound from \"../exceptions/adapterNotFound\"\r\n\r\n// Adapters\r\nimport HttpAdapter from \"../adapters/http\"\r\n\r\n// Classes\r\nimport AdapterHandler from \"../classes/AdapterHandler\"\r\nimport instanciable from \"../utils/instanciable\"\r\n\r\nexport default class Server implements ServerInterface {\r\n\t// -------------------------------------------------\r\n\t// Properties\r\n\t// -------------------------------------------------\r\n\r\n\tprotected _config: Partial<ServerConfigInterface>;\r\n\tprotected adapters: Record<string, SerializedAdapterInterface & {handler?: AdapterHandler}> = {};\r\n\r\n\t// -------------------------------------------------\r\n\t// Boot methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic constructor (config?: Partial<ServerConfigInterface>) {\r\n\t\tthis._config = config || {}\r\n\t\tthis.addAdapter(\"http\", HttpAdapter)\r\n\t}\r\n\r\n\tpublic setConfig (config: Partial<ServerConfigInterface>): void;\r\n\tpublic setConfig (adapter: string | string[], config: Partial<ServerConfigInterface>): void;\r\n\r\n\tpublic setConfig (adapterOrConfig: string | string[] | Partial<ServerConfigInterface>, configOrNone?: Partial<ServerConfigInterface>) {\r\n\t\t// normalize instances\r\n\t\tconst adapters = configOrNone && (typeof adapterOrConfig === \"string\" ? [adapterOrConfig] : adapterOrConfig)\r\n\t\tconst config = configOrNone || adapterOrConfig as Partial<ServerConfigInterface>\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\t// Config is per adapter\r\n\t\t\tadapters.forEach(adapter => this.adapters[adapter].config = deepMerge(this.adapters[adapter].config, config))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// set for reference when adding others adapters later\r\n\t\tthis._config = deepMerge(this._config, config)\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.keys(this.adapters).forEach(adapter => this.adapters[adapter].config = deepMerge(this.adapters[adapter].config, config))\r\n\t}\r\n\r\n\tpublic getConfig () : Partial<ServerConfigInterface>;\r\n\tpublic getConfig (adapter: string) : Partial<ServerConfigInterface> | undefined;\r\n\r\n\tpublic getConfig (adapter?: string) {\r\n\t\tif (adapter) return this.adapters[adapter]?.config\r\n\r\n\t\treturn this._config\r\n\t}\r\n\r\n\tpublic deleteConfig (key: string) : void;\r\n\tpublic deleteConfig (adapter: string | string[], key: string) : void;\r\n\r\n\tpublic deleteConfig (adapterOrKey: string | string[], keyOrNone?: string): void {\r\n\t\tconst adapters = keyOrNone && (typeof adapterOrKey === \"string\" ? [adapterOrKey] : adapterOrKey)\r\n\t\tconst key = keyOrNone || adapterOrKey as string\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\t// Config is per adapter\r\n\t\t\tadapters.forEach(adapter => void delete this.adapters[adapter].config[key])\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\t// -------------------------------------------------\r\n\t// Provider methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic addProvider(provider: ProviderInterface): void;\r\n\tpublic addProvider(adapter: string | string[], provider: ProviderInterface): void;\r\n\r\n\tpublic addProvider(adapterOrProvider: string | string[] | ProviderInterface, providerOrNone?: ProviderInterface): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = providerOrNone && (typeof adapterOrProvider === \"string\" ? [adapterOrProvider] : adapterOrProvider as string[])\r\n\t\tconst provider = providerOrNone || adapterOrProvider as ProviderInterface\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tadapters.forEach(adapter => this.adapters[adapter].providers.push(instanciable(provider)))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.values(this.adapters).forEach(adapter => adapter.providers.push(instanciable(provider)))\r\n\t}\r\n\r\n\tpublic addProviders (providers: ProviderInterface[]) : void;\r\n\tpublic addProviders (adapter: string | string[], Providers: ProviderInterface[]): void;\r\n\r\n\tpublic addProviders(adapterOrProviders: string | string[] | ProviderInterface[], providersOrNone?: ProviderInterface[]): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = providersOrNone && (typeof adapterOrProviders === \"string\" ? [adapterOrProviders] : adapterOrProviders as string[])\r\n\t\tconst providers = providersOrNone ? providersOrNone : adapterOrProviders as ProviderInterface[]\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tproviders.forEach(provider => this.addProvider(adapters, provider))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tproviders.forEach(provider => this.addProvider(provider))\r\n\t}\r\n\r\n\tpublic clearProviders () : void;\r\n\tpublic clearProviders (adapter: string | string[]) : void;\r\n\r\n\tpublic clearProviders(_adapters?: string | string[]): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = typeof _adapters === \"string\" ? [_adapters]: _adapters\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tadapters.forEach(adapter => this.adapters[adapter].providers = [])\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.values(this.adapters).forEach(adapter => adapter.providers = [])\r\n\t}\r\n\r\n\t// -------------------------------------------------\r\n\t// Middleware methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic addMiddleware (id: string, middleware: MiddlewareType) : void;\r\n\tpublic addMiddleware (adapter: string | string[], id: string, middleware: MiddlewareType) : void;\r\n\r\n\tpublic addMiddleware(idOrAdapter: string | string[], middlewareOrId: string | MiddlewareType, cb?: MiddlewareType): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = cb && (typeof idOrAdapter === \"string\" ? [idOrAdapter] : idOrAdapter)\r\n\t\tconst id = (cb ? middlewareOrId : idOrAdapter) as string\r\n\t\tconst middleware = cb ? cb : middlewareOrId as MiddlewareType\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\r\n\t\t\tadapters.forEach(adapter => this.adapters[adapter].middlewares[id] = middleware)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.values(this.adapters).forEach(adapter => adapter.middlewares[id] = middleware)\r\n\t}\r\n\r\n\tpublic addMiddlewares (middlewares: Record<string, MiddlewareType>) : void;\r\n\tpublic addMiddlewares (adapter: string | string[], middlewares: Record<string, MiddlewareType>) : void;\r\n\r\n\tpublic addMiddlewares(middlewaresOrAdapter: Record<string, MiddlewareType> | string | string[], middlewares?: Record<string, MiddlewareType>): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = middlewares ? (typeof middlewaresOrAdapter === \"string\" ? [middlewaresOrAdapter] : middlewaresOrAdapter as string[]) : undefined\r\n\t\tconst middlewareGroup = middlewares ? middlewares : middlewaresOrAdapter\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tObject.keys(middlewareGroup).forEach(middleware => this.addMiddleware(adapters, middleware, middlewareGroup[middleware]))\r\n\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.keys(middlewareGroup).forEach(middlewareKey => this.addMiddleware(middlewareKey, middlewaresOrAdapter[middlewareKey]))\r\n\t}\r\n\r\n\tpublic clearMiddlewares (middlewares?: string | string[]) : void;\r\n\tpublic clearMiddlewares (adapter: string, middlewares?: string | string[]) : void;\r\n\r\n\tpublic clearMiddlewares(adapterOrMiddlewares?: string | string[], middlewares?: string | string[]): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = middlewares && (typeof adapterOrMiddlewares === \"string\" ? [adapterOrMiddlewares] : adapterOrMiddlewares)\r\n\t\tconst middlewaresToRemove = (middlewares ? typeof middlewares === \"string\" ? [middlewares] : middlewares : typeof adapterOrMiddlewares === \"string\" ? [adapterOrMiddlewares] : adapterOrMiddlewares) as string[]\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tadapters.forEach(id => middlewaresToRemove.forEach(middleware => delete this.adapters[id].middlewares[middleware]))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (middlewaresToRemove) {\r\n\t\t\tObject.values(this.adapters).forEach(adapter => middlewaresToRemove.forEach(middleware => { delete adapter.middlewares[middleware] }))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.values(this.adapters).forEach(adapter => adapter.middlewares = {})\r\n\t}\r\n\r\n\t// -------------------------------------------------\r\n\t// Global middleware methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic addGlobal (cb: MiddlewareType) : void;\r\n\tpublic addGlobal (adapter: string | string[], cb: MiddlewareType) : void;\r\n\r\n\tpublic addGlobal(adapterOrCallback: MiddlewareType | string | string[], cb?: MiddlewareType): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = cb && (typeof adapterOrCallback === \"string\" ? [adapterOrCallback]:adapterOrCallback as string[])\r\n\t\tconst callback = cb || adapterOrCallback as MiddlewareType\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tadapters.forEach(adapter => this.adapters[adapter].globals.push(callback))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.values(this.adapters).forEach(adapter => adapter.globals.push(callback))\r\n\t}\r\n\r\n\tpublic addGlobals (middlewares: MiddlewareType[]) : void;\r\n\tpublic addGlobals (adapter: string | string[], middlewares: MiddlewareType[]) : void;\r\n\r\n\tpublic addGlobals(adapterOrGlobals: string | string[] | MiddlewareType[], globalsOrNone?: MiddlewareType[]): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = globalsOrNone && (typeof adapterOrGlobals === \"string\" ? [adapterOrGlobals] : adapterOrGlobals as string[])\r\n\t\tconst globals = globalsOrNone || adapterOrGlobals as MiddlewareType[]\r\n\r\n\t\tif (adapters) {\r\n\t\t\t// make sure all adapters referenced exist\r\n\t\t\tadapters.forEach(adapter => {if (!this.adapters[adapter]) throw new AdapterNotFound(adapter)})\r\n\r\n\t\t\tglobals.forEach(global => this.addGlobal(adapters, global))\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\t(adapterOrGlobals as MiddlewareType[]).forEach(global => this.addGlobal(global))\r\n\t}\r\n\r\n\tpublic clearGlobals () : void;\r\n\tpublic clearGlobals (adapter: string | string[]) : void;\r\n\r\n\tpublic clearGlobals(_adapters?: string | string[]): void {\r\n\t\t// normalize instances\r\n\t\tconst adapters = typeof _adapters === \"string\" ? [_adapters] : _adapters\r\n\r\n\t\tif (adapters) {\r\n\t\t\tadapters.forEach(adapter => this.adapters[adapter].globals = [])\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// push to all adapters\r\n\t\tObject.values(this.adapters).forEach(adapter => adapter.globals = [])\r\n\t}\r\n\r\n\t// -------------------------------------------------\r\n\t// Adapter methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic addAdapter (name: string, adapter: ClassType<AdapterInterface> | AdapterInterface, config?: Partial<ServerConfigInterface>) {\r\n\t\tthis.adapters[name] = {\r\n\t\t\tname,\r\n\t\t\tadapter: instanciable(adapter),\r\n\t\t\tmiddlewares: {},\r\n\t\t\tproviders: [],\r\n\t\t\tglobals: [],\r\n\t\t\tconfig: config ? deepMerge(this._config, config) : this._config,\r\n\t\t\trunning: false,\r\n\t\t\thandler: undefined,\r\n\t\t}\r\n\t}\r\n\r\n\tpublic injectAdapter (name: string | string[]) {\r\n\t\tconst adapters = typeof name === \"string\" ? [name] : name\r\n\r\n\t\tadapters.forEach\r\n\t}\r\n\r\n\tpublic getAdapter (name: string): SerializedAdapterInterface | undefined {\r\n\t\treturn this.adapters[name]\r\n\t}\r\n\r\n\tpublic removeAdapter (name: string) {\r\n\t\tdelete this.adapters[name]\r\n\t}\r\n\r\n\t// -------------------------------------------------\r\n\t// Main methods\r\n\t// -------------------------------------------------\r\n\r\n\tpublic async run(adaptersToRun?: string[] | string): Promise<void> {\r\n\t\tconst adapters = (typeof adaptersToRun === \"string\" ? [adaptersToRun] : adaptersToRun) || Object.keys(this.adapters)\r\n\r\n\t\tawait Promise.all(adapters.map(name => (async () => {\r\n\t\t\t// check handler exists\r\n\t\t\tif (!this.adapters[name]) return console.log(`Adapter ${name} was not found, skipping.`)\r\n\r\n\t\t\t// handler responsible for talking with adapter\r\n\t\t\tconst handler = this.adapters[name].handler = new AdapterHandler(this.adapters[name])\r\n\t\t\tthis.adapters[name].handler = handler\r\n\t\t\tthis.adapters[name].running = true\r\n\r\n\t\t\tawait handler.boot()\r\n\t\t})()))\r\n\t}\r\n\r\n\tpublic async stop(adaptersToStop?: string[] | string) {\r\n\t\tconst adapters = (typeof adaptersToStop === \"string\" ? [adaptersToStop] : adaptersToStop) || Object.keys(this.adapters)\r\n\r\n\t\tawait Promise.all(adapters.map(name => (async () => {\r\n\t\t\tif (this.adapters[name]) {\r\n\t\t\t\tawait this.adapters[name].handler?.shutdown()\r\n\r\n\t\t\t\tthis.adapters[name].handler = undefined\r\n\t\t\t\tthis.adapters[name].running = false\r\n\t\t\t}\r\n\t\t})()))\r\n\t}\r\n\r\n\tpublic async isRunning(adaptersToCheck?: string | string[]) {\r\n\t\tconst adapters = (typeof adaptersToCheck === \"string\" ? [adaptersToCheck] : adaptersToCheck) || Object.keys(this.adapters)\r\n\r\n\t\treturn adapters.filter(adapter => this.adapters[adapter].running).length\r\n\t}\r\n}","// Main module\nimport Server from \"./modules/server\"\nexport default Server\n\n// Interfaces\nexport type { ServerRequest } from \"@acai/interfaces\"\n\n// Utilities\nexport { response } from \"@acai/utils\"\n\n// Adapters\nexport { default as HttpAdapter } from \"./adapters/http\""],"names":["CustomException","CustomException2","CustomException3","readFileSync","join","createServer","router","route","CustomException4","promises","join2","CustomException5","CustomException6"],"mappings":"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"}