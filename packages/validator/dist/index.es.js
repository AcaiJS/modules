/**
 * Copyright (c) 2020 The Nuinalp and APO Softworks Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 **/import{CustomException}from"@acai/utils";import{DateTime}from"luxon";var InvalidRuleException=class extends CustomException{constructor(e,r){super("invalidValidationRule",e,r),this.shouldReport=!0}report(){console.log(this.message)}},rule={onValidate:({value:e})=>Array.isArray(e),onError:({key:e})=>`${e} is not an array`},array_default=rule,rule2={onValidate:({value:e,key:r,fields:t})=>t[`${r}_confirmation`]&&t[`${r}_confirmation`]===e,onError:({value:e,key:r,fields:t})=>t[`${r}_confirmation`]?t[`${r}_confirmation`]!==e?`${r} confirmation does not match`:void 0:`${r} is not confirmed`},confirmed_default=rule2,rule3={onValidate:({value:e})=>!("string"!=typeof e||!e.match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)),onError:({key:e})=>`${e} is not an email`},email_default=rule3,rule4={onValidate:({value:e})=>!("string"!=typeof e||!e.match(/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b/)),onError:({key:e})=>`${e} is not a valid uuid`},uuid_default=rule4,rule5={onValidate:({value:e})=>"object"==typeof e,onError:({key:e})=>`${e} is not an object`},object_default=rule5,rule6={onValidate:({value:e})=>!!e,onError:({key:e})=>`${e} is required`},required_default=rule6,rule7={onValidate:({value:e})=>"string"==typeof e,onError:({key:e})=>`${e} is not a string`},string_default=rule7,rule8={onValidate:({value:e,args:r})=>r&&r.includes("force")?!isNaN(e):"number"==typeof e,onMask:({value:e})=>parseFloat(e),onError:({key:e})=>`${e} is not a number`},number_default=rule8,types={array:(e,r)=>Array.isArray(e)&&r.find(r=>e.find(e=>e===r)),string:(r,e)=>"string"==typeof r&&e.find(e=>e===r),object:(e,r)=>"object"==typeof e&&r.find(r=>e&&Object.keys(e).find(e=>e===r)),number:(r,e)=>"number"==typeof r&&e.find(e=>e===`${r}`)},rule9={onValidate:({value:e,args:r,rules:t,key:a})=>{if(!r||0===r.length)throw new InvalidRuleException(`Rule 'in' for field ${a} has invalid number of arguments`,{value:e,args:r,rules:t,key:a});return t.includes("array")?types.array(e,r):t.includes("string")?types.string(e,r):t.includes("object")?types.object(e,r):!!t.includes("number")&&types.number(e,r)},onError:({rules:e,value:r,key:t,args:a})=>e.includes("array")?Array.isArray(r)?`${t} does not include one of the values: ${(a||[]).join(", ")}`:`${t} value is not an array`:e.includes("string")?"string"!=typeof r?`${t} value is not a string`:`${t} does not include one of the values: ${(a||[]).join(", ")}`:e.includes("object")?"object"!=typeof r?`${t} value is not a object`:`${t} does not include one of the values: ${(a||[]).join(", ")}`:e.includes("number")?"number"!=typeof r?`${t} value is not a number`:`${t} does not include one of the values: ${(a||[]).join(", ")}`:void 0},in_default=rule9,types2={array:(e,r)=>Array.isArray(e)&&0===r.filter(r=>e.find(e=>e.match(r))).length,string:(r,e)=>"string"==typeof r&&0===e.filter(e=>r.match(e)).length,object:(e,r)=>"object"==typeof e&&e&&0===r.filter(r=>Object.keys(e).find(e=>e.match(r))).length,number:(r,e)=>"number"==typeof r&&0===e.filter(e=>`${r}`.match(e)).length},rule10={onValidate:({value:e,args:r,rules:t,key:a})=>{if(!r||0===r.length)throw new InvalidRuleException(`Rule 'notIn' for field ${a} has invalid number of arguments`,{value:e,args:r,rules:t,key:a});return t.includes("array")?types2.array(e,r):t.includes("string")?types2.string(e,r):t.includes("object")?types2.object(e,r):!!t.includes("number")&&types2.number(e,r)},onError:({rules:e,value:t,key:r,args:a})=>e.includes("array")?Array.isArray(t)?`${r} should not include values: ${(a||[]).filter(r=>t.find(e=>e.match(r))).join(", ")}`:`${r} value is not an array`:e.includes("string")?"string"!=typeof t?`${r} value is not a string`:`${r} should not include values: ${(a||[]).filter(e=>t.match(e)).join(", ")}`:e.includes("object")?"object"!=typeof t?`${r} value is not a object`:`${r} should not include values: ${(a||[]).filter(r=>Object.keys(t).find(e=>e.match(r))).join(", ")}`:e.includes("number")?"number"!=typeof t?`${r} value is not a number`:`${r} should not include values: ${(a||[]).filter(e=>`${t}`.match(e)).join(", ")}`:void 0},notIn_default=rule10,rule11={onValidate:({value:e,args:r})=>!!(r&&r.includes("force")&&!isNaN(e)||"number"==typeof e)&&parseFloat(e)===parseInt(e),onMask:({value:e})=>parseFloat(e),onError:({key:e})=>`${e} is not an integer`},integer_default=rule11,rule12={onValidate:({value:e})=>!!e,onError:({key:e})=>`${e} is not truthy`},truthy_default=rule12,types3={array:(e,r)=>Array.isArray(e)&&e.length>=parseInt(r[0]),object:(e,r)=>"object"==typeof e&&e&&Object.keys(e).length>=parseInt(r[0]),string:(e,r)=>"string"==typeof e&&e.length>=parseInt(r[0]),number:(e,r)=>"number"==typeof e&&e>=parseInt(r[0])},rule13={onValidate:({value:e,args:r,rules:t,key:a})=>{if(!r||1!==r.length)throw new InvalidRuleException(`Rule 'min' for field ${a} has invalid number of arguments`,{value:e,args:r,rules:t,key:a});return t.includes("array")?types3.array(e,r):t.includes("string")?types3.string(e,r):t.includes("object")?types3.object(e,r):!!t.includes("number")&&types3.number(e,r)},onError:({rules:e,value:r,key:t,args:a})=>e.includes("array")?Array.isArray(r)?`${t} has less elements than the allowed: ${(a||[])[0]}`:`${t} value is not an array`:e.includes("string")?"string"!=typeof r?`${t} value is not a string`:`${t} has less characters than the allowed: ${(a||[])[0]}`:e.includes("object")?"object"!=typeof r?`${t} value is not a object`:`${t} has less keys than the allowed: ${(a||[])[0]}`:e.includes("number")?"number"!=typeof r?`${t} value is not a number`:`${t} is less than the allowed: ${(a||[])[0]}`:void 0},min_default=rule13,types4={array:(e,r)=>Array.isArray(e)&&e.length<=parseInt(r[0]),object:(e,r)=>"object"==typeof e&&e&&Object.keys(e).length<=parseInt(r[0]),string:(e,r)=>"string"==typeof e&&e.length<=parseInt(r[0]),number:(e,r)=>"number"==typeof e&&e<=parseInt(r[0])},rule14={onValidate:({value:e,args:r,rules:t,key:a})=>{if(!r||1!==r.length)throw new InvalidRuleException(`Rule 'max' for field ${a} has invalid number of arguments`,{value:e,args:r,rules:t,key:a});return t.includes("array")?types4.array(e,r):t.includes("string")?types4.string(e,r):t.includes("object")?types4.object(e,r):!!t.includes("number")&&types4.number(e,r)},onError:({rules:e,value:r,key:t,args:a})=>e.includes("array")?Array.isArray(r)?`${t} has more elements than the allowed: ${(a||[])[0]}`:`${t} value is not an array`:e.includes("string")?"string"!=typeof r?`${t} value is not a string`:`${t} has more characters than the allowed: ${(a||[])[0]}`:e.includes("object")?"object"!=typeof r?`${t} value is not a object`:`${t} has more keys than the allowed: ${(a||[])[0]}`:e.includes("number")?"number"!=typeof r?`${t} value is not a number`:`${t} is more than the allowed: ${(a||[])[0]}`:void 0},max_default=rule14,rule15={onValidate:({value:r,args:t,rules:a,key:n})=>{if("string"!=typeof r)return!1;if(!t||1!==t.length)throw new InvalidRuleException(`Rule 'regex' for field ${n} has invalid number of arguments`,{value:r,args:t,rules:a,key:n});try{"".match(new RegExp(t[0]))}catch(e){throw new InvalidRuleException(`Rule 'regex' for field ${n} has a invalid regex pattern (${t[0]})`,{value:r,args:t,rules:a,key:n})}return!!r.match(new RegExp(t[0]))},onError:({key:e})=>`${e} does not passes the regex`},regex_default=rule15,rule16={onValidate:({value:e,args:r})=>(r&&r[0]?DateTime.fromFormat(e,r[0]):DateTime.fromISO(e)).isValid,onError:({key:e})=>`${e} is not a valid date`},date_default=rule16,ruleList={confirmed:rule2,required:rule6,truthy:rule12,email:rule3,uuid:rule4,regex:rule15,date:rule16,in:rule9,notIn:rule10,min:rule13,max:rule14,object:rule5,string:rule7,array:rule,number:rule8,float:rule8,integer:rule11,int:rule11};function setRule(e,r){ruleList[e]=r}function setRules(r){Object.keys(r).forEach(e=>{ruleList[e]=r[e]})}function clearRules(){ruleList={}}var rules_default=()=>ruleList,Validator=class{constructor(e={}){this.throwable=!0,this._validated={},this._errors={},this._fields=e}static validate(e,r){const t=new this(e);return t.validate(r),t}validate(e=void 0){const c="object"==typeof e?e:this.getSchema();if(Object.keys(c).forEach(r=>{let t=!0,a=this._fields[r];const n=Array.isArray(c[r])?c[r]:c[r].split(";");var e=n.find(e=>"required"===e.split(":")[0]),l=n.map(e=>e.split(":")[0]);if(void 0!==a||e){for(let e=0;e<n.length;e++){const[i,...o]=n[e].split(":");var s=(o.join(":")||"").split(",");const u=this.rules[i];if(!u)throw new InvalidRuleException(`Rule ${i} on validator ${this.constructor.name} doesn't exist`);if(u.onValidate&&!u.onValidate({value:a,key:r,fields:this._fields,args:s,rules:l})){t=!1;const d=u.onError&&u.onError({value:a,key:r,fields:this._fields,args:s,rules:l})||`${i} failed validation`;this._errors[r]||(this._errors[r]=[]),Array.isArray(d)?d.forEach(e=>this._errors[r].push(e)):this._errors[r].push(d)}else a=u.onMask?u.onMask({value:a,key:r,fields:this._fields,args:s,rules:l}):a}this._errors[r]||(this._validated[r]=a)}t&&!this._validated[r]&&(this._validated[r]=a)}),!1!==e&&this.throwable&&0<Object.keys(this._errors).length){const r=new Error("Validation error");throw r.type="validation",r.data=this.printErrors(),r.shouldReport=!1,r}}getSchema(){throw new Error("Schema not implemented")}printErrors(){if(0!==Object.keys(this._errors).length)return{errors:this._errors}}get rules(){return rules_default()}get validated(){return this._validated}get errors(){return this.printErrors()}get fields(){return this._fields}},src_default=Validator;export{clearRules,src_default as default,rules_default as rules,setRule,setRules};
//# sourceMappingURL=index.es.js.map
