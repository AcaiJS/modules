{"version":3,"file":"index.js","sources":["../src/abstractions/builder/parts/properties.ts","../src/abstractions/builder/parts/static.ts","../src/abstractions/builder/parts/data.ts","../src/abstractions/builder/parts/join.ts","../src/abstractions/builder/parts/query.ts","../src/abstractions/builder/parts/table.ts","../src/abstractions/builder/parts/transaction.ts","../src/abstractions/builder/parts/migration.ts","../src/abstractions/builder/index.ts","../src/classes/queryStrategies/sql/helpers/typeMaps.ts","../src/classes/queryStrategies/sql/helpers/tableDeserialize.ts","../src/classes/queryStrategies/sql/helpers/columnSerialize.ts","../src/classes/queryStrategies/sql/helpers/joinClauseBuilder.ts","../src/exceptions/query.ts","../src/classes/queryStrategies/sql/helpers/queryResolver.ts","../src/classes/queryStrategies/sql/helpers/resolveQueryPart.ts","../src/utils/isEquals.ts","../src/classes/queryStrategies/sql/helpers/smartUpdate.ts","../src/classes/queryStrategies/sql/strategy.ts","../src/classes/queryStrategies/sql/index.ts","../src/utils/dictionary.ts","../src/index.ts"],"sourcesContent":["// Interfaces\nimport QueryPart \t\t\t\t\t\t\t\tfrom \"../../../interfaces/QueryPart\"\nimport QueryStrategy \t\t\t\t\t\t\tfrom \"../../../interfaces/queryStrategy\"\nimport GenericModelContent, { ModelContent } \tfrom \"../../../interfaces/ModelContent\"\nimport JoinClauseInterface \t\t\t\t\t\tfrom \"../../../interfaces/JoinClause\"\nimport QueryComparison \t\t\t\t\t\t\tfrom \"../../../interfaces/QueryComparison\"\n\nexport default abstract class Properties<T = Record<string, ModelContent>> {\n\n\t// -------------------------------------------------\n\t// properties\n\t// -------------------------------------------------\n\n\tprotected tableName\t\t= \"\";\n\tprotected queryBuild\t \t : QueryPart = {type:\"or\", logic:[]};\n\tprotected orderByQuery  \t?: {order?: \"ASC\" | \"DESC\"; by: string};\n\tprotected offsetQuantity\t?: number;\n\tprotected limitQuantity \t?: number;\n\tprotected fieldsList\t\t?: string[] = [];\n\tprotected joinList\t\t\t?: JoinClauseInterface;\n\tprotected groupByColumn \t?: string;\n\tprotected parseResultCache\t?: (result: any | any[]) => unknown;\n\n\tprotected static adapter: QueryStrategy;\n\tprotected static settings: Record<string, ModelContent>;\n\n\t// -------------------------------------------------\n\t// debug methods\n\t// -------------------------------------------------\n\n\tpublic rawQueryObject = () => {\n\t\treturn this.queryBuild\n\t}\n\n\t// -------------------------------------------------\n\t// helper methods\n\t// -------------------------------------------------\n\n\tprotected getAdapter () {\n\t\treturn (this.constructor as unknown as {adapter: QueryStrategy}).adapter\n\t}\n\n\tprotected push (type: \"and\" | \"or\", subqueries: unknown[]) {\n\t\tif (this.queryBuild.logic.length !== 0 && (this.queryBuild as QueryPart).type !== type) {\n\t\t\tfor (let i = 0; i < subqueries.length; i ++) {\n\t\t\t\t(this.queryBuild.logic[this.queryBuild.logic.length - 1] as QueryPart).logic.push(subqueries[i])\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.queryBuild.logic.push({\n\t\t\t\ttype: \"and\",\n\t\t\t\tlogic: subqueries,\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected buildQueryPart = <ModelConfig = T>(arg1: keyof ModelConfig | [keyof ModelConfig, QueryComparison | GenericModelContent, GenericModelContent?][], arg2?: QueryComparison | GenericModelContent, arg3?: GenericModelContent): [string, string, ModelContent][] => {\n\t\tif (typeof arg1 === \"string\") {\n\t\t\tif (arg3) {\n\t\t\t\treturn [[arg1, arg2 as string, arg3]]\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [[arg1, \"=\", arg2 as string]]\n\t\t\t}\n\t\t}\n\n\t\treturn (arg1 as unknown as any).reduce((prev: [keyof ModelConfig, QueryComparison, ModelContent][], item: [keyof ModelConfig, QueryComparison, ModelContent]) => {\n\t\t\tconst items = this.buildQueryPart(...item)\n\n\t\t\titems.forEach((v) => prev.push(v as unknown as any))\n\n\t\t\treturn prev\n\t\t}, [])\n\t}\n}","// Interfaces\nimport AbstractQuery \t\tfrom \"../interface\"\nimport QueryStrategy \t\tfrom \"../../../interfaces/queryStrategy\"\nimport { ModelContent } \tfrom \"../../../interfaces/ModelContent\"\n\n// Parts\nimport Properties from \"./properties\"\n\nexport default abstract class StaticClass<T = Record<string, ModelContent>> extends Properties<T> {\n\t// -------------------------------------------------\n\t// static methods\n\t// -------------------------------------------------\n\n\tpublic static async toggleAdapter (adapter: QueryStrategy, settings?: Record<string, ModelContent>) {\n\t\tthis.adapter = new (adapter as any)()\n\t\tif (settings) this.settings = settings\n\n\t\treturn await this.adapter.build(this.settings)\n\t}\n\n\tpublic static async toggleSettings (settings: Record<string, ModelContent>) {\n\t\tthis.settings = settings\n\n\t\treturn await this.adapter.build(this.settings)\n\t}\n\n\tpublic static async isConnected () {\n\t\treturn await this.adapter.isConnected()\n\t}\n\n\tpublic static async hasErrors () {\n\t\treturn await this.adapter.hasErrors()\n\t}\n\n\tpublic static async close () {\n\t\tawait this.adapter.close()\n\t}\n\n\tpublic static table<model = Record<string, ModelContent>> (table: string) {\n\t\tconst query = new (this as any)()\n\n\t\tquery.table(table)\n\n\t\treturn query as AbstractQuery<model>\n\t}\n}","// Interfaces\nimport { ModelContent } \tfrom \"../../../interfaces/ModelContent\"\n\n// Parts\nimport StaticClass from \"./static\"\n\nexport default abstract class DataClass<T = Record<string, ModelContent>> extends StaticClass<T> {\n\n\t// -------------------------------------------------\n\t// data methods\n\t// -------------------------------------------------\n\n\tpublic raw = async (query: string, params: unknown[] = []) => {\n\t\treturn await this.getAdapter().raw(query, params)\n\t}\n\n\tpublic count = async (column?: string) => {\n\t\treturn await this.getAdapter().count(\n\t\t\tthis.tableName,\n\t\t\tcolumn || \"*\",\n\t\t\tthis.queryBuild.logic.length > 0 ? this.queryBuild : undefined,\n\t\t)\n\t}\n\n\tpublic avg = async (column: string) => {\n\t\treturn await this.getAdapter().avg(\n\t\t\tthis.tableName,\n\t\t\tcolumn,\n\t\t\tthis.queryBuild.logic.length > 0 ? this.queryBuild : undefined,\n\t\t)\n\t}\n\n\tpublic sum = async (column: string) => {\n\t\treturn await this.getAdapter().sum(\n\t\t\tthis.tableName,\n\t\t\tcolumn,\n\t\t\tthis.queryBuild.logic.length > 0 ? this.queryBuild : undefined,\n\t\t)\n\t}\n}","// Interfaces\nimport { ModelContent } \tfrom \"../../../interfaces/ModelContent\"\n\n// Parts\nimport DataClass from \"./data\"\n\nexport default abstract class JoinClass<T = Record<string, ModelContent>> extends DataClass<T> {\n\t// -------------------------------------------------\n\t// join methods\n\t// -------------------------------------------------\n\n\tpublic joinType (type: \"inner\" | \"left\" | \"right\" | \"outer\", table: string, firstColumn: string, secondColumnOrOperator: string | \"=\" | \"!=\" | \">\" | \"<\", secondColumn?: string) {\n\t\tthis.joinList = {\n\t\t\ttype,\n\t\t\ttable,\n\t\t\tfirstColumn,\n\t\t\tsecondColumn: secondColumn || secondColumnOrOperator,\n\t\t\toperator: secondColumn ? secondColumnOrOperator : \"=\",\n\t\t}\n\n\t\treturn this\n\t}\n\n\tpublic join (table: string, firstColumn: string, secondColumnOrOperator: string | \"=\" | \"!=\" | \">\" | \"<\", secondColumn?: string) {\n\t\tthis.joinType(\"outer\", table, firstColumn, secondColumnOrOperator, secondColumn)\n\n\t\treturn this\n\t}\n\n\tpublic leftJoin (table: string, firstColumn: string, secondColumnOrOperator: string | \"=\" | \"!=\" | \">\" | \"<\", secondColumn?: string) {\n\t\tthis.joinType(\"left\", table, firstColumn, secondColumnOrOperator, secondColumn)\n\n\t\treturn this\n\t}\n\n\tpublic rightJoin (table: string, firstColumn: string, secondColumnOrOperator: string | \"=\" | \"!=\" | \">\" | \"<\", secondColumn?: string) {\n\t\tthis.joinType(\"right\", table, firstColumn, secondColumnOrOperator, secondColumn)\n\n\t\treturn this\n\t}\n\n\tpublic innerJoin (table: string, firstColumn: string, secondColumnOrOperator: string | \"=\" | \"!=\" | \">\" | \"<\", secondColumn?: string) {\n\t\tthis.joinType(\"inner\", table, firstColumn, secondColumnOrOperator, secondColumn)\n\n\t\treturn this\n\t}\n}","// Interfaces\nimport GenericModelContent, { ModelContent } \tfrom \"../../../interfaces/ModelContent\"\nimport QueryComparison \t\t\t\t\t\t\tfrom \"../../../interfaces/QueryComparison\"\nimport PaginatedResponse \t\t\t\t\t\tfrom \"../../../interfaces/PaginatedResponse\"\n\n// Parts\nimport JoinClass from \"./join\"\n\nexport default abstract class QueryClass<T = Record<string, ModelContent>> extends JoinClass<T> {\n\t// -------------------------------------------------\n\t// query methods\n\t// -------------------------------------------------\n\n\tpublic table = (table: string) => {\n\t\tthis.tableName = table\n\n\t\treturn this\n\t}\n\n\tpublic where = (arg1: string | [string, QueryComparison, GenericModelContent?][], arg2?: QueryComparison | GenericModelContent, arg3?: GenericModelContent) => {\n\t\tconst subqueries = this.buildQueryPart(arg1, arg2, arg3)\n\t\tthis.push(\"and\", subqueries)\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic orWhere = (arg1: string | [string, QueryComparison, GenericModelContent?][], arg2?: QueryComparison | GenericModelContent, arg3?: GenericModelContent) => {\n\t\tconst subqueries = this.buildQueryPart(arg1, arg2, arg3)\n\t\tthis.push(\"or\", subqueries)\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic whereNull = (field: string) => {\n\t\tthis.push(\"and\", [[field, \"IS NULL\"]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic whereNotNull = (field: string) => {\n\t\tthis.push(\"and\", [[field, \"IS NOT NULL\"]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic orWhereNull = (field: string) => {\n\t\tthis.push(\"or\", [[field, \"IS NULL\"]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic orWhereNotNull = (field: string) => {\n\t\tthis.push(\"or\", [[field, \"IS NOT NULL\"]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic whereIn = (field: string, values: any[]) => {\n\t\tthis.push(\"and\", [[field, \"IN\", values]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic whereNotIn = (field: string, values: any[]) => {\n\t\tthis.push(\"and\", [[field, \"NOT IN\", values]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic orWhereIn = (field: string, values: any[]) => {\n\t\tthis.push(\"or\", [[field, \"IN\", values]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic orWhereNotIn = (field: string, values: any[]) => {\n\t\tthis.push(\"or\", [[field, \"NOT IN\", values]])\n\n\t\t// return self for concatenation\n\t\treturn this\n\t}\n\n\tpublic orderBy = (by: string, order?: \"ASC\" | \"DESC\") => {\n\t\tthis.orderByQuery = {order, by}\n\n\t\treturn this\n\t}\n\n\tpublic limit = (quantity: number, offset?: number) => {\n\t\tthis.limitQuantity \t\t\t\t= quantity\n\t\tif (offset) this.offsetQuantity = offset\n\n\t\treturn this\n\t}\n\n\tpublic groupBy = (column: string) => {\n\t\tthis.groupByColumn \t= column\n\n\t\treturn this\n\t}\n\n\tpublic fields  = <ModelConfig = T> (fields: (keyof ModelConfig | \"*\")[]) => {\n\t\tthis.fieldsList = fields as string[]\n\n\t\treturn this\n\t}\n\n\tpublic parseResult = <ModelConfig = T> (cb: (result: ModelConfig | ModelConfig[]) => unknown) => {\n\t\tthis.parseResultCache = cb\n\n\t\treturn this\n\t}\n\t// -------------------------------------------------\n\t// get methods\n\t// -------------------------------------------------\n\n\tpublic first = async <ModelConfig = T>() : Promise<ModelConfig | undefined> => {\n\t\tconst result = (await this.limit(1).get<ModelConfig>())[0]\n\n\t\treturn result\n\t}\n\n\tpublic last = async <ModelConfig = T>(fields: (keyof ModelConfig)[] | \"*\" | keyof ModelConfig = \"*\") : Promise<ModelConfig | undefined> => {\n\t\tconst result = await this.getAdapter().querySelect<ModelConfig>(\n\t\t\tthis.tableName,\n\t\t\tfields,\n\t\t\tthis.queryBuild.logic.length > 0 ? this.queryBuild:undefined,\n\t\t\t1,\n\t\t\t0,\n\t\t\t{\n\t\t\t\torder: \"DESC\",\n\t\t\t\tby: this.orderByQuery?.by || \"id\",\n\t\t\t},\n\t\t\tthis.joinList,\n\t\t)[0]\n\n\t\treturn this.parseResultCache ? this.parseResultCache(result):result\n\t}\n\n\tpublic get = async <ModelConfig = T>(fields?: (keyof ModelConfig)[] | \"*\" | keyof ModelConfig) : Promise<ModelConfig[]> => {\n\t\tconst result = await this.getAdapter().querySelect<ModelConfig>(\n\t\t\tthis.tableName,\n\t\t\tfields || this.fieldsList as (keyof ModelConfig)[] | \"*\",\n\t\t\tthis.queryBuild.logic.length > 0 ? this.queryBuild:undefined,\n\t\t\tthis.limitQuantity,\n\t\t\tthis.offsetQuantity,\n\t\t\tthis.orderByQuery,\n\t\t\tthis.joinList,\n\t\t)\n\n\t\treturn this.parseResultCache ? (this.parseResultCache(result) as ModelConfig[]):result\n\t}\n\n\tpublic paginate = async <ModelConfig = T>(page?: number | string, perPage: number | string = 25) : Promise<PaginatedResponse<ModelConfig>> => {\n\t\tconst total = await this.count()\n\t\tconst npp \t= parseInt(perPage as string)\n\t\tconst np \t= parseInt(page as string)\n\n\t\tconst entries = await this.getAdapter().querySelect<ModelConfig>(\n\t\t\tthis.tableName,\n\t\t\tthis.fieldsList as (keyof ModelConfig)[] | \"*\",\n\t\t\tthis.queryBuild.logic.length > 0 ? this.queryBuild:undefined,\n\t\t\tnpp,\n\t\t\t((np || 1) - 1) * npp,\n\t\t\tthis.orderByQuery,\n\t\t\tthis.joinList,\n\t\t)\n\n\t\treturn {\n\t\t\tdata: ((this.parseResultCache ? this.parseResultCache(entries):entries.map(i => ({...i}))) as ModelConfig[]),\n\n\t\t\tpage: np || 1,\n\t\t\tperPage: npp,\n\n\t\t\ttotalItems: total,\n\t\t\ttotalPages: Math.ceil(total / npp),\n\t\t}\n\t}\n\n\t// -------------------------------------------------\n\t// manipulation methods\n\t// -------------------------------------------------\n\n\tpublic insert = async <ModelConfig = T>(fields: ModelConfig) => {\n\t\treturn await this.getAdapter().queryAdd<ModelConfig>(this.tableName, fields)\n\t}\n\n\tpublic insertMany = async <ModelConfig = T>(rows: ModelConfig[]) => {\n\t\treturn Promise.all(rows.map(row => this.insert(row)))\n\t}\n\n\tpublic update = async <ModelConfig = T>(fields: ModelConfig) => {\n\t\treturn await this.getAdapter().queryUpdate<ModelConfig>(this.tableName, fields, this.queryBuild)\n\t}\n\n\tpublic updateMany = async <ModelConfig = T>(rows: ModelConfig[]) => {\n\t\treturn Promise.all(rows.map(row => this.update(row)))\n\t}\n\n\tpublic delete = async () => {\n\t\treturn await this.getAdapter().queryDelete(this.tableName, this.queryBuild)\n\t}\n}","// Interfaces\nimport ColumnOptions \tfrom \"../../../interfaces/ColumnOptions\"\nimport { ModelContent } from \"../../../interfaces/ModelContent\"\n\n// Parts\nimport QueryClass from \"./query\"\n\nexport default abstract class TableClass<T = Record<string, ModelContent>> extends QueryClass<T> {\n\t// -------------------------------------------------\n\t// table methods\n\t// -------------------------------------------------\n\n\tpublic getColumns = async <ModelConfig = T>() => {\n\t\tconst result = await this.getAdapter().getColumns<ModelConfig>(this.tableName)\n\t\treturn result\n\t}\n\n\tpublic async createTable (columns: Record<string, ColumnOptions>) {\n\t\treturn await this.getAdapter().createTable(this.tableName, columns)\n\t}\n\n\tpublic async alterTable (columns: Record<string, ColumnOptions & {action: \"ADD\" | \"ALTER\" | \"DELETE\"; after?: string; before?: string}>) {\n\t\treturn await this.getAdapter().alterTable(this.tableName, columns)\n\t}\n\n\tpublic async dropTable () {\n\t\treturn await this.getAdapter().dropTable(this.tableName)\n\t}\n\n\tpublic async existsTable () {\n\t\treturn await this.getAdapter().existsTable(this.tableName)\n\t}\n}","// Interfaces\nimport { ModelContent } from \"../../../interfaces/ModelContent\"\n\n// Parts\nimport TableClass from \"./table\"\n\nexport default abstract class TransactionClass<T = Record<string, ModelContent>> extends TableClass<T> {\n\t// -------------------------------------------------\n\t// Static methods\n\t// -------------------------------------------------\n\n\tpublic static async transact (callback: (config: any) => Promise<void>) {\n\t\tawait this.startTransaction()\n\t\ttry {\n\t\t\tawait callback({\n\t\t\t\tsavePoint\t: this.savepointTransaction,\n\t\t\t\trelease\t\t: this.releaseTransaction,\n\t\t\t})\n\t\t}\n\t\tcatch (e) {\n\t\t\tawait this.rollbackTransaction()\n\t\t\tthrow e\n\t\t}\n\t\tawait this.commitTransaction()\n\t}\n\n\tpublic static async startTransaction () {\n\t\tawait this.adapter.startTransaction()\n\t}\n\n\tpublic static async savepointTransaction (name: string) {\n\t\tawait this.adapter.savepointTransaction(name)\n\t}\n\n\tpublic static async releaseTransaction (name: string) {\n\t\tawait this.adapter.releaseTransaction(name)\n\t}\n\n\tpublic static async rollbackTransaction () {\n\t\tawait this.adapter.rollbackTransaction()\n\t}\n\n\tpublic static async commitTransaction () {\n\t\tawait this.adapter.commitTransaction()\n\t}\n\n\t// -------------------------------------------------\n\t// Instance methods\n\t// -------------------------------------------------\n\n\tpublic async transact (callback: (config: any) => Promise<void>) {\n\t\tawait this.startTransaction()\n\t\ttry {\n\t\t\tawait callback({\n\t\t\t\tsavePoint\t: this.savepointTransaction,\n\t\t\t\trelease\t\t: this.releaseTransaction,\n\t\t\t})\n\t\t}\n\t\tcatch (e) {\n\t\t\tawait this.rollbackTransaction()\n\t\t\tthrow e\n\t\t}\n\t\tawait this.commitTransaction()\n\t}\n\n\tpublic async startTransaction () {\n\t\tawait this.getAdapter().startTransaction()\n\t}\n\n\tpublic async savepointTransaction (name: string) {\n\t\tawait this.getAdapter().savepointTransaction(name)\n\t}\n\n\tpublic async releaseTransaction (name: string) {\n\t\tawait this.getAdapter().releaseTransaction(name)\n\t}\n\n\tpublic async rollbackTransaction () {\n\t\tawait this.getAdapter().rollbackTransaction()\n\t}\n\n\tpublic async commitTransaction () {\n\t\tawait this.getAdapter().commitTransaction()\n\t}\n}","// Interfaces\nimport ColumnOptions \tfrom \"../../../interfaces/ColumnOptions\"\nimport { ModelContent } from \"../../../interfaces/ModelContent\"\n\n// Parts\nimport TransactionClass from \"./transaction\"\n\nexport default abstract class MigrationClass<T = Record<string, ModelContent>> extends TransactionClass<T> {\n\t// -------------------------------------------------\n\t// migration methods\n\t// -------------------------------------------------\n\n\tpublic static addMigration (table: string, columns: Record<string, ColumnOptions>) {\n\t\tthis.adapter.addMigration(table, columns)\n\t}\n\n\tpublic static async runMigrations () {\n\t\tawait this.adapter.runMigrations()\n\t}\n}","import MigrationClass from \"./parts/migration\"\nexport default MigrationClass","// -------------------------------------------------\n// Serialize column data\n// -------------------------------------------------\n\nconst typeMaps = {\n\tstring: \"VARCHAR\",\n\ttext: \"TEXT\",\n\tint: \"INT\",\n\tfloat: \"FLOAT\",\n\tboolean: \"TINYINT\",\n\tdate: \"DATE\",\n\tdatetime: \"DATETIME\",\n\ttimestamp: \"TIMESTAMP\",\n\tjson: \"JSON\",\n\tenum: \"ENUM\",\n} as const\n\nexport default typeMaps","// Interfaces\nimport ColumnOptions \tfrom \"../../../../interfaces/ColumnOptions\"\nimport constraintTypes \tfrom \"../../../../interfaces/constraintInterfaces\"\n\n// Parts\nimport typeMaps from \"./typeMaps\"\n\nexport default function tableDeserialize (tableString: string): Record<string, ColumnOptions> {\n\t// const columnSt\n\tconst columns: Record<string, ColumnOptions> = {}\n\n\ttableString.split(\"\\n\").splice(1).slice(0, -1).map( i => i.replace(/,$/g, \"\")).forEach(line => {\n\t\tconst parts = line.split(\" \").filter(i => i !== \"\")\n\n\t\t// columns\n\t\tif (parts[0].match(/^`.+`$/)) {\n\t\t\tconst [type, length] \t= parts[1].split(\"(\")\n\t\t\tconst defaultValue \t\t= parts.find(i => i === \"DEFAULT\") ? parts[parts.indexOf(\"DEFAULT\") + 1].replace(/(`|')/g, \"\"):undefined\n\n\t\t\tcolumns[parts[0].replace(/`/g, \"\")] = {\n\t\t\t\ttype\t\t\t: Object.keys(typeMaps).find(key => typeMaps[key] === type.toUpperCase()) as keyof typeof typeMaps,\n\t\t\t\tlength\t\t\t: length ? parseInt(length.replace(/(\\(|\\))/g, \"\")) : undefined,\n\t\t\t\tautoIncrement \t: !!parts.find(i => i === \"AUTO_INCREMENT\"),\n\t\t\t\tnullable\t\t: !parts.find((item, index) => item === \"NOT\" && parts[index + 1 ] && parts[index + 1] === \"NULL\"),\n\t\t\t\tdefault\t\t\t: !defaultValue || (defaultValue && defaultValue.match(/\\D+/)) ? defaultValue : parseFloat(defaultValue as string),\n\t\t\t}\n\t\t}\n\t\t// foreign key\n\t\telse if (parts[0] === \"CONSTRAINT\") {\n\t\t\tconst tableNameIndex = parts.indexOf(\"REFERENCES\") + 1\n\n\t\t\tcolumns[parts[4].replace(/(\\(|\\)|`|,)/g, \"\")].foreign = {\n\t\t\t\tname\t\t: parts[1].replace(/`/g, \"\"),\n\t\t\t\ttable\t\t: parts[tableNameIndex].replace(/`/g, \"\"),\n\t\t\t\tcolumn\t\t: parts[tableNameIndex + 1].replace(/(\\(|\\)|`|,)/g, \"\"),\n\t\t\t\tonUpdate\t: parts[parts.indexOf(\"UPDATE\") - 1] === \"ON\" ? (parts[parts.indexOf(\"UPDATE\") + 1] as constraintTypes):undefined,\n\t\t\t\tonDelete\t: parts[parts.indexOf(\"DELETE\") - 1] === \"ON\" ? (parts[parts.indexOf(\"DELETE\") + 1] as constraintTypes):undefined,\n\t\t\t}\n\t\t}\n\t\t// primary key\n\t\telse if (parts[0] === \"PRIMARY\") {\n\t\t\tcolumns[parts[2].replace(/(\\(|\\)|`|,)/g, \"\")].primary = true\n\t\t}\n\t\t// unique key\n\t\telse if (parts[0] === \"UNIQUE\") {\n\t\t\tcolumns[parts[3].replace(/(\\(|\\)|`|,)/g, \"\")].unique = true\n\t\t}\n\t})\n\n\treturn columns\n}","// Interfaces\nimport ColumnOptions from \"../../../../interfaces/ColumnOptions\"\n\n// Parts\nimport typeMaps from \"./typeMaps\"\n\nexport default function columnSerialize (key: string, data: ColumnOptions) {\n\tconst length = data.length !== undefined ? data.length : [\"string\", \"int\"].indexOf(data.type) + 1 > 0 ? 255: undefined\n\tconst column\t: Array<string> = []\n\tconst constraint: Array<string> = []\n\n\t// -------------------------------------------------\n\t// create column\n\t// -------------------------------------------------\n\n\t// column name\n\tcolumn.push(key)\n\t// column type and length/enum args\n\tcolumn.push(`${typeMaps[data.type].toLowerCase()}${length ? `(${typeof length === \"number\" ? length : length.map(i => `\"${i}\"`).join(\",\")})`:\"\"}`)\n\t// column nullable\n\tcolumn.push(data.nullable ? \"NULL\":\"NOT NULL\")\n\t// column unique\n\tif (data.unique) \t\tcolumn.push(\"UNIQUE\")\n\t// column auto increment\n\tif (data.autoIncrement) column.push(\"AUTO_INCREMENT\")\n\t// column default\n\tif (data.default) \t\tcolumn.push(`DEFAULT ${(typeof data.default === \"string\" ? `'${data.default}'`:data.default)}`)\n\n\t// -------------------------------------------------\n\t// create constraint\n\t// -------------------------------------------------\n\n\tif (data.foreign) {\n\t\t// field name\n\t\tconstraint.push(`FOREIGN KEY (${ key })`)\n\t\t// foreign table\n\t\tconstraint.push(`REFERENCES ${data.foreign.table}`)\n\t\t// foreign table primary key\n\t\tconstraint.push(`(${ data.foreign.column || \"id\" })`)\n\t\t// on update method\n\t\tif (data.foreign.onUpdate) constraint.push(`ON UPDATE ${data.foreign.onUpdate}`)\n\t\t// on delete method\n\t\tif (data.foreign.onDelete) constraint.push(`ON DELETE ${data.foreign.onDelete}`)\n\t}\n\n\treturn [column.join(\" \"), constraint.join(\" \") || undefined] as [string, string | undefined]\n}","// Interfaces\nimport JoinClauseInterface \tfrom \"../../../../interfaces/JoinClause\"\n\nconst types = {\n\t\"inner\": \"INNER\",\n\t\"left\": \"LEFT\",\n\t\"right\": \"RIGHT\",\n\t\"outer\": \"FULL OUTER\",\n}\n\nexport default function joinClauseBuilder (joinClause: JoinClauseInterface) {\n\tconst type = types[joinClause.type]\n\n\treturn `${type} JOIN ${joinClause.table} ON ${joinClause.firstColumn}${joinClause.operator}${joinClause.secondColumn}`\n}","// Interfaces\nimport { CustomException } from \"@acai/utils\"\n\nexport default class QueryException extends CustomException {\n\t// main error properties\n    public shouldReport\t\t= true;\n    public shouldSerialize\t= true;\n    public status\t\t\t= 500;\n    public critical\t\t\t= false;\n\n\t// custom error properties\n\tpublic readonly query: string;\n\tpublic readonly state: string;\n\n\tpublic constructor (message: string, state: string, query: string) {\n\t\tsuper(\"query\", message, {state, query})\n\n\t\tthis.query = query\n\t\tthis.state = state\n\t}\n}","// Packages\nimport * as Client from \"mysql2\"\nimport QueryException from \"../../../../exceptions/query\"\n\nexport default async function queryResolver (client: Client.Connection, queryString: string, params: unknown[] = []): Promise<any> {\n\tlet result\n\n\ttry {\n\t\tresult = await new Promise((resolve, reject) => {\n\t\t\tclient.query(queryString, params,\n\t\t\t\t(error, results) => {\n\t\t\t\t\tif (error) reject(error)\n\n\t\t\t\t\tresolve(results)\n\t\t\t\t})\n\t\t})\n\t}\n\tcatch (e) {\n\t\tif ((e as any).sqlMessage || (e as any).sqlState) {\n\t\t\tthrow new QueryException((e as any).sqlMessage, (e as any).sqlState, queryString)\n\t\t}\n\t}\n\n\treturn result\n}","// Interfaces\nimport ModelContent \t\tfrom \"../../../../interfaces/ModelContent\"\nimport QueryPart \t\t\tfrom \"../../../../interfaces/QueryPart\"\n\nfunction valueType (value: unknown) {\n\tif (value === null || value === undefined)\n\t\treturn \"\"\n\tif (Array.isArray(value))\n\t\treturn \" (?)\"\n\n\treturn \" ?\"\n}\n\nexport default function resolveQueryPart (queryBuild: QueryPart) {\n\tconst values = [] as unknown[]\n\tconst parts = queryBuild.logic.map((item) => {\n\t\tconst subparts = (item as QueryPart).logic.map((subitem) => {\n\t\t\tif ((subitem as QueryPart).type) {\n\t\t\t\treturn `(${resolveQueryPart(subitem as QueryPart)})`\n\t\t\t}\n\n\t\t\tconst arrayitem = subitem as [string, string, ModelContent]\n\t\t\tif (arrayitem[2] !== null && arrayitem[2] !== undefined) values.push(arrayitem[2])\n\t\t\treturn `${arrayitem[0]} ${arrayitem[1]}${valueType(arrayitem[2])}`\n\t\t})\n\n\t\treturn subparts.join(` ${(item as QueryPart).type === \"and\" ? \"AND\":\"OR\"} `)\n\t}) as string[]\n\n\treturn [parts.join(` ${queryBuild.type === \"and\" ? \"AND\":\"OR\"} `), values] as [string, (string | number | boolean | any)[]]\n}","export default function isEquals(x: unknown, y: unknown) {\n\t// if both x and y are null or undefined and exactly the same\n\tif (x === y) return true\n\n\t// if they are not strictly equal, they both need to be Objects\n\tif (!(x instanceof Object) || !(y instanceof Object)) return false\n\n\t// they must have the exact same prototype chain, the closest we can do is\n\t// test there constructor.\n\tif (x.constructor !== y.constructor) return false\n\n\tfor (const p in x) {\n\t\t// other properties were tested using x.constructor === y.constructor\n\t\tif (!x.hasOwnProperty(p)) continue\n\n\t\t// allows to compare x[ p ] and y[ p ] when set to undefined\n\t\tif (!y.hasOwnProperty(p)) return false\n\n\t\t// if they have the same strict value or identity then they are equal\n\t\tif (x[p] === y[p]) continue\n\n\t\t// Numbers, Strings, Functions, Booleans must be strictly equal\n\t\tif (typeof (x[p]) !== \"object\") return false\n\n\t\t// Objects and Arrays must be tested recursively\n\t\tif (!isEquals(x[p], y[p])) return false\n\t}\n\n\t// allows x[ p ] to be set to undefined\n\tfor (const p in y) {\n\t\tif (y.hasOwnProperty(p) && !x.hasOwnProperty(p))\n\t\t\treturn false\n\t}\n\n\treturn true\n}","// Interfaces\nimport ColumnOptions from \"../../../../interfaces/ColumnOptions\"\n\n// Utils\nimport isEquals from \"../../../../utils/isEquals\"\n\n// Parts\nimport columnSerialize from \"./columnSerialize\"\n\n// -------------------------------------------------\n// calculate columns\n// -------------------------------------------------\n\nfunction calculateColumns (oldColumns: Record<string, ColumnOptions>, updatedColumns: Record<string, ColumnOptions>) {\n\tconst responseColumns = [] as string[]\n\n\t// columns to add\n\tObject.keys(updatedColumns).forEach((key, index) => {\n\t\tif (!oldColumns[key]) {\n\t\t\tconst response \t= [] as string[]\n\t\t\tconst column \t= updatedColumns[key]\n\n\t\t\t// column action to insert\n\t\t\tresponse.push(\"ADD\")\n\t\t\t// column information\n\t\t\tresponse.push(columnSerialize(key, column)[0])\n\t\t\t// column position\n\t\t\tresponse.push(index === 0 ? \"FIRST\" : `AFTER ${Object.keys(updatedColumns)[index - 1]}`)\n\n\t\t\tresponseColumns.push(response.join(\" \"))\n\t\t}\n\t})\n\n\t// columns to delete\n\tObject.keys(oldColumns).forEach(key => {\n\t\tif (!updatedColumns[key]) {\n\t\t\tconst response = [] as string[]\n\n\t\t\t// column action to delete\n\t\t\tresponse.push(\"DROP COLUMN\")\n\t\t\t// column name\n\t\t\tresponse.push(key)\n\n\t\t\tresponseColumns.push(response.join(\" \"))\n\t\t}\n\t})\n\n\t// columns to update\n\tObject.keys(updatedColumns).forEach(key => {\n\t\tif (oldColumns[key]) {\n\t\t\t// diffs\n\t\t\tconst { foreign: _1, primary: _3, ...oldData } = oldColumns[key]\n\t\t\tconst { foreign: _2, primary: _4, ...newData } = updatedColumns[key]\n\n\t\t\t// positioning\n\t\t\tconst fpos \t= Object.keys(oldColumns).indexOf(key)\n\t\t\tconst spos \t= Object.keys(updatedColumns).indexOf(key)\n\t\t\tconst pos \t= spos === 0 ? \"FIRST\" : `AFTER ${Object.keys(updatedColumns)[spos - 1]}`\n\n\t\t\tif (!isEquals(oldData, newData) || fpos !== spos) {\n\t\t\t\tconst response \t= [] as string[]\n\t\t\t\tconst column\t= updatedColumns[key]\n\n\t\t\t\t// drop index if not present anymore\n\t\t\t\tif (oldData.unique) response.push(`DROP INDEX ${key},`)\n\t\t\t\t// column action to insert\n\t\t\t\tresponse.push(\"MODIFY COLUMN\")\n\t\t\t\t// column information\n\t\t\t\tresponse.push(columnSerialize(key, column)[0])\n\t\t\t\t// column position\n\t\t\t\tif (fpos !== spos && spos + 1 !== Object.keys(updatedColumns).length) response.push(pos)\n\n\t\t\t\tresponseColumns.push(response.join(\" \"))\n\t\t\t}\n\t\t}\n\t})\n\n\t// update primary key\n\tconst oldkey = Object.keys(oldColumns).find(i => oldColumns[i].primary)\n\tconst newkey = Object.keys(updatedColumns).find(i => updatedColumns[i].primary)\n\tif (oldkey && newkey && oldkey !== newkey)\n\t\tresponseColumns.push(`DROP PRIMARY KEY, ADD PRIMARY KEY (${newkey})`)\n\telse if (oldkey && !newkey)\n\t\tresponseColumns.push(\"DROP PRIMARY KEY\")\n\telse if (!oldkey && newkey)\n\t\tresponseColumns.push(`ADD PRIMARY KEY (${newkey})`)\n\n\treturn responseColumns\n}\n\n// -------------------------------------------------\n// calculate constraints\n// -------------------------------------------------\n\nfunction calculateConstraints (oldColumns: Record<string, ColumnOptions>, updatedColumns: Record<string, ColumnOptions>) {\n\tconst queryPart = [] as string[]\n\n\t// constraints to add\n\tObject.keys(updatedColumns).forEach(key => {\n\t\tif (updatedColumns[key] && updatedColumns[key].foreign && (!oldColumns[key] || !oldColumns[key].foreign)) {\n\t\t\tconst column \t= updatedColumns[key]\n\t\t\tconst foreign \t= column.foreign as Exclude<ColumnOptions[\"foreign\"], undefined>\n\t\t\tconst response\t= [] as string[]\n\n\t\t\t// action\n\t\t\tresponse.push(\"ADD\")\n\t\t\t// custom defined name\n\t\t\tif (foreign.name) response.push(`CONSTRAINT ${foreign.name}`)\n\t\t\t// table column responsible for the constraint\n\t\t\tresponse.push(`FOREIGN KEY (${key})`)\n\t\t\t// table that is referenced\n\t\t\tresponse.push(`REFERENCES ${foreign.table}`)\n\t\t\t// primary key of the table\n\t\t\tresponse.push(`(${foreign.column || \"id\"})`)\n\t\t\t// on update event\n\t\t\tif (foreign.onUpdate) response.push(`ON UPDATE ${foreign.onUpdate}`)\n\t\t\t// on delete event\n\t\t\tif (foreign.onDelete) response.push(`ON DELETE ${foreign.onDelete}`)\n\n\t\t\tqueryPart.push(response.join(\" \"))\n\t\t}\n\t})\n\n\t// constraints to delete\n\tObject.keys(oldColumns).forEach(key => {\n\t\tif ((!updatedColumns[key] || !updatedColumns[key].foreign) && oldColumns[key] && oldColumns[key].foreign) {\n\t\t\tqueryPart.push(`DROP FOREIGN KEY ${oldColumns[key].foreign?.name}`)\n\t\t}\n\t})\n\n\t// constraints to update\n\tObject.keys(updatedColumns).forEach(key => {\n\t\tif (updatedColumns[key] && updatedColumns[key].foreign && oldColumns[key] && oldColumns[key].foreign && !isEquals(updatedColumns[key].foreign, oldColumns[key].foreign)) {\n\t\t\tconst column \t= updatedColumns[key]\n\t\t\tconst foreign \t= column.foreign as Exclude<ColumnOptions[\"foreign\"], undefined>\n\t\t\tconst response\t= [] as string[]\n\n\t\t\t// remove previous\n\t\t\tresponse.push(`DROP FOREIGN KEY ${oldColumns[key].foreign?.name},`)\n\t\t\t// action\n\t\t\tresponse.push(\"ADD\")\n\t\t\t// custom defined name\n\t\t\tif (foreign.name) response.push(`CONSTRAINT ${foreign.name}`)\n\t\t\t// table column responsible for the constraint\n\t\t\tresponse.push(`FOREIGN KEY (${key})`)\n\t\t\t// table that is referenced\n\t\t\tresponse.push(`REFERENCES ${foreign.table}`)\n\t\t\t// primary key of the table\n\t\t\tresponse.push(`(${foreign.column || \"id\"})`)\n\t\t\t// on update event\n\t\t\tif (foreign.onUpdate) response.push(`ON UPDATE ${foreign.onUpdate}`)\n\t\t\t// on delete event\n\t\t\tif (foreign.onDelete) response.push(`ON DELETE ${foreign.onDelete}`)\n\n\t\t\tqueryPart.push(response.join(\" \"))\n\t\t}\n\t})\n\n\treturn queryPart\n}\n\n// -------------------------------------------------\n// main method\n// -------------------------------------------------\n\nexport default function smartUpdate (tableName: string, oldColumns: Record<string, ColumnOptions>, updatedColumns: Record<string, ColumnOptions>) {\n\tconst columns \t\t= calculateColumns(oldColumns, \t\tupdatedColumns)\n\tconst constraints \t= calculateConstraints(oldColumns, \tupdatedColumns)\n\n\t// build columns\n\tconst columnQuery = columns.length > 0 ? `ALTER TABLE ${tableName} ${\n\t\tcolumns.filter(i => !!i.trim()).join(\", \")\n\t}`:\"\"\n\n\t// build constraints\n\tconst constraintQuery = constraints.length === 0 ? \"\":`ALTER TABLE ${tableName} ${\n\t\tconstraints.join(\", \")\n\t}`\n\n\treturn [columnQuery.trim().replace(/ +(?= )/g, \"\"), constraintQuery.trim().replace(/ +(?= )/g, \"\")] as [string, string]\n}","// Packages\nimport * as Client from \"mysql2\"\n\n// Interfaces\nimport ModelContent \t\tfrom \"../../../interfaces/ModelContent\"\nimport QueryPart \t\t\tfrom \"../../../interfaces/QueryPart\"\nimport queryStrategy \t\tfrom \"../../../interfaces/queryStrategy\"\nimport ColumnOptions \t\tfrom \"../../../interfaces/ColumnOptions\"\nimport JoinClauseInterface \tfrom \"../../../interfaces/JoinClause\"\n\n// Helpers\nimport { tableDeserialize, columnSerialize, joinClauseBuilder, queryResolver, resolveQueryPart, smartUpdate } from \"./helpers\"\n\nclass SqlStrategy implements queryStrategy {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\tprotected migrations: Record<string, Record<string, ColumnOptions>> = {};\n\tprotected client \t= {} as Client.Connection;\n\tprotected connected = false;\n\tprotected errors: any;\n\n\t// -------------------------------------------------\n\t// Client methods\n\t// -------------------------------------------------\n\n\tpublic async close () {\n\t\tif (this.client && this.client.end) await this.client.end()\n\t}\n\n\tpublic async build (settings: Record<string, unknown>) {\n\t\tawait this.close()\n\t\tthis.client = await Client.createConnection(settings)\n\t\treturn new Promise(r => {\n\t\t\tthis.client.connect((err) => {\n\t\t\t\tthis.errors \t= err\n\t\t\t\tthis.connected \t= !err\n\n\t\t\t\treturn r(err || false)\n\t\t\t})\n\t\t})\n\t}\n\n\tpublic isConnected () {\n\t\treturn this.connected\n\t}\n\n\tpublic hasErrors () {\n\t\treturn this.errors || false\n\t}\n\n\t// -------------------------------------------------\n\t// Data methods\n\t// -------------------------------------------------\n\n\tpublic async raw (query: string, params: unknown[] = []) {\n\t\treturn await queryResolver(this.client, query, params)\n\t}\n\n\tpublic async sum (table: string, column: string, condition?: QueryPart) {\n\t\tconst stringcondition = condition && resolveQueryPart(condition)\n\n\t\treturn await queryResolver(\n\t\t\tthis.client,\n\t\t\t`SELECT SUM(${column}) FROM ${table}${ stringcondition ? ` WHERE ${stringcondition[0]}`:\"\" }`,\n\t\t\tstringcondition && stringcondition[1],\n\t\t)\n\t}\n\n\tpublic async avg (table: string, column: string, condition?: QueryPart) {\n\t\tconst stringcondition = condition && resolveQueryPart(condition)\n\n\t\treturn await queryResolver(\n\t\t\tthis.client,\n\t\t\t`SELECT AVG(${column}) FROM ${table}${ stringcondition ? ` WHERE ${stringcondition[0]}`:\"\" }`,\n\t\t\tstringcondition && stringcondition[1],\n\t\t)\n\t}\n\n\tpublic async count (table: string, column: string, condition?: QueryPart) {\n\t\tconst stringcondition = condition && resolveQueryPart(condition)\n\n\t\treturn Object.values((await queryResolver(\n\t\t\tthis.client,\n\t\t\t`SELECT COUNT(${column}) FROM ${table}${ stringcondition ? ` WHERE ${stringcondition[0]}`:\"\" }`,\n\t\t\tstringcondition && stringcondition[1],\n\t\t))[0])[0] as number\n\t}\n\n\t// -------------------------------------------------\n\t// Table methods\n\t// -------------------------------------------------\n\n\tpublic async existsTable (table: string) {\n\t\tconst query = (await queryResolver(\n\t\t\tthis.client,\n\t\t\t\"SHOW TABLES\",\n\t\t))\n\n\t\treturn !!query.find(i => Object.values(i)[0] === table)\n\t}\n\n\tpublic async getColumns (table: string) {\n\t\tconst query = (await queryResolver(\n\t\t\tthis.client,\n\t\t\t`SHOW CREATE TABLE ${table}`,\n\t\t))\n\n\t\tif (query.length === 0)\n\t\t\treturn {}\n\n\t\treturn tableDeserialize(query[0][\"Create Table\"])\n\t}\n\n\tpublic async createTable<T = Record<string, ModelContent>> (table: string, fields: Record<keyof T, ColumnOptions>) {\n\t\tconst key = Object.keys(fields).find(k => fields[k].primary)\n\t\tconst columns = [] as string[]\n\t\tconst foreign = [] as string[]\n\n\t\t// build columns\n\t\tObject.keys(fields).map(key => {\n\t\t\tconst column = columnSerialize(key, fields[key])\n\n\t\t\tcolumns.push(column[0] as string)\n\n\t\t\tif (column[1]) foreign.push(column[1])\n\t\t})\n\n\t\tawait queryResolver(\n\t\t\tthis.client,\n\t\t\t`CREATE TABLE ${table} (${\n\t\t\t\tcolumns.join(\", \")\n\t\t\t}${\n\t\t\t\tkey ? `,PRIMARY KEY (${key})`:\"\"\n\t\t\t}${\n\t\t\t\tforeign.length > 0 ? `, ${foreign.join(\", \")}`:\"\"\n\t\t\t})`,\n\t\t)\n\n\t\treturn true\n\t}\n\n\tpublic async alterTable<T = Record<string, ModelContent>> (table: string, fields: Record<keyof T, ColumnOptions & {action: \"ADD\" | \"ALTER\" | \"DELETE\"; after?: string; before?: string}>) {\n\t\tconst key = Object.keys(fields).find(k => fields[k].primary)\n\t\tconst columns = [] as string[]\n\t\tconst foreign = [] as string[]\n\n\t\t// build columns\n\t\tObject.keys(fields).map(key => {\n\t\t\tconst column = columnSerialize(key, fields[key])\n\t\t\tconst type = fields[key].action === \"ALTER\" ? \"MODIFY COLUMN\": fields[key].action  === \"DELETE\" ? \"DROP COLUMN\":\"ADD\"\n\n\t\t\tif (type === \"DROP COLUMN\")\n\t\t\t\tcolumns.push(`${type} ${key}`)\n\t\t\telse\n\t\t\t\tcolumns.push(`${type} ${column[0]}${fields[key].before ? ` BEFORE ${fields[key].before}`:\"\"}${fields[key].after ? ` AFTER ${fields[key].after}`:\"\"}`)\n\n\t\t\tif (column[1]) foreign.push(column[1])\n\t\t})\n\n\t\tawait queryResolver(\n\t\t\tthis.client,\n\t\t\t`ALTER TABLE ${table} (${\n\t\t\t\tcolumns.join(\", \")\n\t\t\t}${\n\t\t\t\tkey ? `,PRIMARY KEY (${key})`:\"\"\n\t\t\t}${\n\t\t\t\tforeign.length > 0 ? `, ${foreign.join(\", \")}`:\"\"\n\t\t\t})`,\n\t\t)\n\n\t\treturn true\n\t}\n\n\tpublic async dropTable (table: string) {\n\t\tawait queryResolver(\n\t\t\tthis.client,\n\t\t\t`DROP TABLE IF EXISTS ${table}`,\n\t\t)\n\n\t\treturn true\n\t}\n\n\t// -------------------------------------------------\n\t// migration methods\n\t// -------------------------------------------------\n\n\tpublic addMigration (table: string, columns: Record<string, ColumnOptions>) {\n\t\tthis.migrations[table] = columns\n\t}\n\n\tpublic async runMigrations () {\n\t\t// data\n\t\tconst columns \t\t= [] as string[]\n\t\tconst constraints \t= [] as string[]\n\n\t\t// gather all migrations\n\t\tawait Promise.all(Object.keys(this.migrations).map(tableName => {\n\t\t\tconst c = async () => {\n\t\t\t\tconst updatedtable \t= this.migrations[tableName]\n\n\t\t\t\t// update table\n\t\t\t\tif (await this.existsTable(tableName)) {\n\t\t\t\t\tconst oldtable \t\t\t\t\t= await this.getColumns(tableName)\n\t\t\t\t\tconst [_columns, _constraints] \t= smartUpdate(tableName, oldtable, updatedtable)\n\n\t\t\t\t\tif (_columns) columns.push(_columns)\n\t\t\t\t\tif (_constraints) constraints.push(_constraints)\n\t\t\t\t}\n\t\t\t\t// create table\n\t\t\t\telse {\n\t\t\t\t\tconst key = Object.keys(updatedtable).find(k => updatedtable[k].primary)\n\t\t\t\t\tconst _columns \t= [] as string[]\n\t\t\t\t\tconst foreign \t= [] as string[]\n\n\t\t\t\t\tObject.keys(updatedtable).map(key => {\n\t\t\t\t\t\tconst column = columnSerialize(key, updatedtable[key])\n\n\t\t\t\t\t\t_columns.push(column[0] as string)\n\n\t\t\t\t\t\tif (column[1]) foreign.push(column[1])\n\t\t\t\t\t})\n\n\t\t\t\t\tcolumns.push(\n\t\t\t\t\t\t`CREATE TABLE ${tableName} (${\n\t\t\t\t\t\t\t_columns.join(\", \")\n\t\t\t\t\t\t}${\n\t\t\t\t\t\t\tkey ? `,PRIMARY KEY (${key})`:\"\"\n\t\t\t\t\t\t})`,\n\t\t\t\t\t)\n\n\t\t\t\t\tconstraints.push(`ALTER TABLE ${tableName} ${\n\t\t\t\t\t\tforeign.map(i => `ADD ${i}`).join(\", \")\n\t\t\t\t\t}`)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn c()\n\t\t}))\n\n\t\t// disable foreign key constraint\n\t\tawait queryResolver(this.client, \"SET FOREIGN_KEY_CHECKS=0;\")\n\n\t\t// run migrations\n\t\tawait Promise.all(columns.map(i => queryResolver(this.client, i)))\n\t\tawait Promise.all(constraints.map(c => queryResolver(this.client, c)))\n\n\t\t// reenable foreign key constraint\n\t\tawait queryResolver(this.client, \"SET FOREIGN_KEY_CHECKS=1;\")\n\n\t\t// dump all the tables after finishing\n\t\tthis.migrations = {}\n\t}\n\n\t// -------------------------------------------------\n\t// Transact methods\n\t// -------------------------------------------------\n\n\tpublic async startTransaction () {\n\t\tawait queryResolver(this.client, \"START TRANSACTION\")\n\t}\n\n\tpublic async savepointTransaction (name: string) {\n\t\tawait queryResolver(this.client, `SAVEPOINT ${name}`)\n\t}\n\n\tpublic async releaseTransaction (name: string) {\n\t\tawait queryResolver(this.client, `RELEASE SAVEPOINT ${name}`)\n\t}\n\n\tpublic async rollbackTransaction () {\n\t\tawait queryResolver(this.client, \"ROLLBACK\")\n\t}\n\n\tpublic async commitTransaction () {\n\t\tawait queryResolver(this.client, \"COMMIT\")\n\t}\n\n\t// -------------------------------------------------\n\t// CRUD methods\n\t// -------------------------------------------------\n\n\tpublic async querySelect<T = Record<string, ModelContent>>(table: string, fields?: (keyof T)[], condition?: QueryPart, limit?: number, offset?: number, orderBy?: {order?: \"ASC\" | \"DESC\"; by: string}, joinClause?: JoinClauseInterface, groupBy?: string) {\n\t\tconst stringcondition \t= condition && resolveQueryPart(condition)\n\n\t\treturn await queryResolver(\n\t\t\tthis.client,\n\t\t\t`SELECT ${\n\t\t\t\t(fields && fields.length > 0) ? fields.join(\", \"):\"*\"\n\t\t\t} FROM ${\n\t\t\t\ttable\n\t\t\t}${\n\t\t\t\tstringcondition && stringcondition[0] ? ` WHERE ${stringcondition[0]}`:\"\"\n\t\t\t}${\n\t\t\t\tgroupBy ? ` GROUP BY ${groupBy}`:\"\"\n\t\t\t}${\n\t\t\t\torderBy ? ` ORDER BY ${orderBy.by} ${orderBy.order || \"ASC\"}`:\"\"\n\t\t\t}${\n\t\t\t\tlimit ? ` LIMIT ${limit}`:\"\"\n\t\t\t}${ offset ? ` OFFSET ${offset}`:\"\"}${\n\t\t\t\tjoinClause ? joinClauseBuilder(joinClause):\"\"\n\t\t\t}`,\n\t\t\tstringcondition && stringcondition[1],\n\t\t)\n\t}\n\n\tpublic async queryAdd<T = Record<string, ModelContent>>(table: string, fields: Partial<T>) {\n\t\tconst response = await queryResolver(\n\t\t\tthis.client,\n\t\t\t`INSERT INTO ${table}(${Object.keys(fields).join(\", \")}) VALUES (${Object.values(fields).map(() => \"?\").join(\", \")})`,\n\t\t\tObject.values(fields),\n\t\t)\n\n\t\treturn response.insertId\n\t}\n\n\tpublic async queryUpdate<T = Record<string, ModelContent>>(table: string, fields: Partial<T>, condition?: QueryPart) {\n\t\tconst values \t\t\t= Object.keys(fields).map((key) => `${key} = ?`)\n\t\tconst stringcondition \t= condition && resolveQueryPart(condition)\n\t\tconst query\t\t\t\t= await queryResolver(\n\t\t\tthis.client,\n\t\t\t`UPDATE ${table} SET ${values}${stringcondition && stringcondition[0] ? ` WHERE ${stringcondition[0]}`:\"\"}`,\n\t\t\t[...Object.values(fields), ...((stringcondition && stringcondition[1]) || [])],\n\t\t)\n\n\t\treturn query.affectedRows\n\t}\n\n\tpublic async queryDelete(table: string, condition?: QueryPart) {\n\t\tconst stringcondition \t= condition && resolveQueryPart(condition)\n\t\tconst query\t\t\t\t= await queryResolver(\n\t\t\tthis.client,\n\t\t\t`DELETE FROM ${table}${stringcondition && stringcondition[0] ? ` WHERE ${stringcondition[0]}`:\"\"}`,\n\t\t\t(stringcondition && stringcondition[1]),\n\t\t)\n\n\t\treturn query as any\n\t}\n}\n\nexport default SqlStrategy","// Abstractions\nimport QueryAbstract from \"../../../abstractions/builder/index\"\n\n// Interfaces\nimport SettingsConfigInterface \tfrom \"./types\"\n\n// Strategy\nimport strategy from \"./strategy\"\n\nexport default class SqlQuery extends QueryAbstract {\n\tprotected static adapter = new strategy();\n\tprotected static settings: SettingsConfigInterface;\n}","// -------------------------------------------------\n// Imports\n// -------------------------------------------------\n\nimport MigrationClass \tfrom \"../abstractions/builder\"\nimport SqlQuery \t\tfrom \"../classes/queryStrategies/sql\"\n\n// interfaces\nimport type ModelContent from \"../interfaces/ModelContent\"\n\nconst queries = {} as Record<string, typeof MigrationClass>\n\nexport async function addQuery (name: string, type: string, config?: Record<string, ModelContent>) {\n\tswitch (type) {\n\t\tcase \"sql\":\n\t\tcase \"mysql\":\n\t\tcase \"mysqli\":\n\t\t\tqueries[name] = SqlQuery\n\t\t\tbreak\n\t}\n\n\tif (config) {\n\t\tawait queries[name].toggleSettings(config)\n\t}\n\n\treturn queries[name]\n}\n\nexport async function setDefault(name:string, config?: Record<string, ModelContent>) {\n\treturn await addQuery(\"default\", name, config)\n}\n\n// default query\nexport default (key?: string): typeof MigrationClass => queries[key || \"default\"]","// -------------------------------------------------\n// Exports\n// -------------------------------------------------\n\n// Base abstract query\nexport {default as AbstractQuery} from \"./abstractions/builder\"\n\n// Implementations\nexport {default as SqlQuery} from \"./classes/queryStrategies/sql\"\n\n// Interfaces\nexport type { default as PaginatedResponse } from \"./interfaces/PaginatedResponse\"\n\n// -------------------------------------------------\n// Connection handling\n// -------------------------------------------------\n\nimport dictionary from \"./utils/dictionary\"\nexport * from \"./utils/dictionary\"\nexport default dictionary"],"names":["CustomException","createConnection"],"mappings":"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"}