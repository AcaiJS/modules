{"version":3,"file":"index.js","sources":["../src/types/string/index.ts","../src/types/int/index.ts","../src/types/date/index.ts","../src/types/boolean/index.ts","../src/types/float/index.ts","../src/utils/Hasher.ts","../src/types/hash/index.ts","../src/types/sid/index.ts","../src/types/uuid/index.ts","../src/types/bigInt/index.ts","../src/types/datetime/index.ts","../src/types/id/index.ts","../src/types/json/index.ts","../src/types/smallInt/index.ts","../src/types/text/index.ts","../src/types/time/index.ts","../src/types/timestamp/index.ts","../src/types/index.ts","../src/utils/foreignHandler.ts","../src/modules/Model.ts","../src/modules/ModelDecorator.ts","../src/modules/FieldDecorator.ts","../src/modules/HasOneDecorator.ts","../src/modules/HasManyDecorator.ts","../src/modules/BelongsToDecorator.ts","../src/index.ts"],"sourcesContent":["// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toString = ({value, args}) => {\n\tconst format = (value === undefined || value === null) ? \"\":`${value}`\n\n\tif (args) {\n\t\tif (args.max && args.max < format.length)\n\t\t\treturn format.substring(0, args.max)\n\t}\n\n\treturn format\n}\n\nconst stringType = {\n\tonCreate\t: toString,\n\tonUpdate\t: toString,\n\tonSave\t\t: toString,\n\tonRetrieve\t: toString,\n} as ModelTypeInterface\n\nexport default stringType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toInt = ({value, args}) => {\n\tif (args?.nullable && (value === null || value === undefined)) return null\n\n\tconst format = parseInt(value)\n\n\tif (args) {\n\t\tif (args.max && args.max < format)\n\t\t\treturn args.max\n\t\tif (args.min && args.min > format)\n\t\t\treturn args.min\n\t}\n\n\treturn format\n}\n\nconst intType = {\n\ttype: {\n\t\ttype: \"int\",\n\t},\n\n\tonCreate\t: toInt,\n\tonUpdate\t: toInt,\n\tonSave\t\t: toInt,\n\tonRetrieve\t: toInt,\n} as ModelTypeInterface\n\nexport default intType","// Packages\nimport { DateTime } from \"luxon\"\n\n// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toDate = ({value}) => {\n\tif (DateTime.isDateTime(value))\n\t\treturn value\n\tif (typeof value === \"string\")\n\t\treturn DateTime.fromISO(value)\n\tif (typeof value === \"number\")\n\t\treturn DateTime.fromMillis(value)\n\tif (value instanceof Date)\n\t\treturn DateTime.fromJSDate(value)\n\n\treturn value\n}\n\nconst toSerializeDate = ({value, args}) => {\n\tconst _value = DateTime.isDateTime(value) ? value : DateTime.fromJSDate(value)\n\n\tif (args) {\n\t\tif (args.format) {\n\t\t\treturn _value.toFormat(args.format)\n\t\t}\n\t}\n\n\treturn _value.toISODate()\n}\n\nconst dateType = {\n\ttype: {\n\t\ttype: \"date\",\n\t},\n\tonCreate\t: toDate,\n\tonRetrieve\t: toDate,\n\tonSave\t\t: toSerializeDate,\n\tonSerialize\t: toSerializeDate,\n} as ModelTypeInterface\n\nexport default dateType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toBoolean = ({value}) => {\n\treturn !!value\n}\n\nconst toDatabaseBoolean = ({value}) => {\n\treturn value ? 1:0\n}\n\nconst booleanType = {\n\ttype: {\n\t\ttype: \"int\",\n\t},\n\tonSave\t\t: toDatabaseBoolean,\n\tonCreate\t: toBoolean,\n\tonRetrieve\t: toBoolean,\n\tonSerialize\t: toBoolean,\n} as ModelTypeInterface\n\nexport default booleanType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toFloat = ({value, args}) => {\n\tconst format = parseFloat(value)\n\n\tif (args) {\n\t\tif (args.max && args.max < format)\n\t\t\treturn args.max\n\t\tif (args.min && args.min > format)\n\t\t\treturn args.min\n\t}\n\n\treturn format\n}\n\nconst floatType = {\n\ttype: {\n\t\ttype: \"float\",\n\t\tlength: 53,\n\t},\n\n\tonCreate\t: toFloat,\n\tonUpdate\t: toFloat,\n\tonSave\t\t: toFloat,\n\tonRetrieve\t: toFloat,\n} as ModelTypeInterface\n\nexport default floatType","// Packages\nimport * as bcrypt from \"bcrypt\"\n\nexport default class Hasher {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\tprotected value\t\t\t\t: string;\n\tprotected saltOrRounds\t\t: string | number | undefined;\n\n\t// -------------------------------------------------\n\t// Main methods\n\t// -------------------------------------------------\n\n\tconstructor (value?: string, saltOrRounds?: string) {\n\t\tif (value) this.value \t= value\n\t\tthis.saltOrRounds \t\t= `$2b$10$${saltOrRounds}`\n\t}\n\n\t// -------------------------------------------------\n\t// Instance methods\n\t// -------------------------------------------------\n\n\tpublic hash (value: string) {\n\t\tthis.value = bcrypt.hashSync(value, this.saltOrRounds || 10)\n\t}\n\n\tpublic toString () {\n\t\treturn this.value\n\t}\n\n\tpublic compare (valueToCompare: string) {\n\t\treturn bcrypt.compareSync(valueToCompare, this.value)\n\t}\n\n\t// -------------------------------------------------\n\t// Helper methods\n\t// -------------------------------------------------\n\n\tprivate hashCode(str: string) {\n\t\tlet hash = 0, i, chr\n\t\tif (str.length === 0) return hash\n\t\tfor (i = 0; i < str.length; i++) {\n\t\t\tchr   = str.charCodeAt(i)\n\t\t\thash  = ((hash << 5) - hash) + chr\n\t\t\thash |= 0 // Convert to 32bit integer\n\t\t}\n\t\treturn hash\n\t}\n}","// Packages\nimport config from \"@acai/config\"\n\n// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\n// Utils\nimport Hasher from \"../../utils/Hasher\"\n\nconst hashType = {\n\tonCreate\t: ({value}) => {\n\t\tif (typeof value === \"string\") {\n\t\t\tconst salt = config ? config.getConfig(\"APP_KEY\", undefined):undefined\n\n\t\t\tconst hash = new Hasher(undefined, salt || \"10\")\n\t\t\thash.hash(value)\n\n\t\t\treturn hash\n\t\t}\n\n\t\treturn value\n\t},\n\tonSave\t: ({value}) => {\n\t\tif (!value) return value\n\n\t\tif ((value as Hasher).toString)\n\t\t\treturn (value as Hasher).toString()\n\n\t\treturn `${value}`\n\t},\n\tonRetrieve\t: ({value}) => {\n\t\treturn new Hasher(value as string)\n\t},\n\tonSerialize\t: ({value}) => {\n\t\tif (value && (value as Hasher).toString)\n\t\t\treturn (value as Hasher).toString()\n\n\t\treturn `${value}`\n\t},\n} as ModelTypeInterface\n\nexport default hashType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toSid = ({value, args, key, model}) => {\n\t// field is not primary key, should not auto generate\n\tif (model.$primary !== key) return value\n\n\tif (value !== undefined && value !== null && args.nullable !== true)\n\t\treturn `${value}`\n\telse\n\t\treturn Math.random().toString(36).substring(2, 2 + (args?.length || 11))\n}\n\nconst sidType = {\n\tonCreate\t: toSid,\n\tonUpdate\t: toSid,\n\tonSave\t\t: toSid,\n\tonRetrieve\t: toSid,\n} as ModelTypeInterface\n\nexport default sidType","// Packages\nimport { v4 as uuid } from \"uuid\"\n\n// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toUuid = ({value, key, args, model}) => {\n\t// field is not primary key, should not auto generate\n\tif (model.$primary !== key) return value\n\n\tif (value !== undefined && value !== null && args.nullable !== true)\n\t\treturn `${value}`\n\telse\n\t\treturn uuid()\n}\n\nconst uuidType = {\n\ttype: {\n\t\ttype: \"string\",\n\t\tlength: 36,\n\t},\n\tonCreate\t: toUuid,\n\tonUpdate\t: toUuid,\n\tonSave\t\t: toUuid,\n\tonRetrieve\t: toUuid,\n} as ModelTypeInterface\n\nexport default uuidType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toInt = ({value, args}) => {\n\tconst format = parseInt(value)\n\n\tif (args) {\n\t\tif (args.max && args.max < format)\n\t\t\treturn args.max\n\t\tif (args.min && args.min > format)\n\t\t\treturn args.min\n\t}\n\n\treturn format\n}\n\nconst bigIntType = {\n\ttype: {\n\t\ttype: \"bigint\",\n\t},\n\n\tonCreate\t: toInt,\n\tonUpdate\t: toInt,\n\tonSave\t\t: toInt,\n\tonRetrieve\t: toInt,\n} as ModelTypeInterface\n\nexport default bigIntType","// Packages\nimport { DateTime } from \"luxon\"\n\n// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toDate = ({value}) => {\n\tif (DateTime.isDateTime(value))\n\t\treturn value\n\tif (typeof value === \"string\")\n\t\treturn DateTime.fromISO(value)\n\tif (typeof value === \"number\")\n\t\treturn DateTime.fromMillis(value)\n\tif (value instanceof Date)\n\t\treturn DateTime.fromJSDate(value)\n\n\treturn value\n}\n\nconst toSerializeDate = ({value, args}) => {\n\tconst _value = DateTime.isDateTime(value) ? value : DateTime.fromJSDate(value)\n\n\tif (args) {\n\t\tif (args.format) {\n\t\t\treturn _value.toFormat(args.format)\n\t\t}\n\t}\n\n\treturn _value.toSQL()\n}\n\nconst datetimeType = {\n\ttype: {\n\t\ttype: \"datetime\",\n\t},\n\tonCreate\t: toDate,\n\tonRetrieve\t: toDate,\n\tonSave\t\t: toSerializeDate,\n\tonSerialize\t: toSerializeDate,\n} as ModelTypeInterface\n\nexport default datetimeType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toInt = ({value}) => {\n\tconst format = parseInt(value)\n\n\treturn format\n}\n\nconst idType = {\n\ttype: {\n\t\ttype: \"int\",\n\t\tlength: 21,\n\t},\n\n\tonCreate\t: toInt,\n\tonUpdate\t: toInt,\n\tonSave\t\t: toInt,\n\tonRetrieve\t: toInt,\n} as ModelTypeInterface\n\nexport default idType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toJson = ({value}) => {\n\tif (typeof value === \"string\")\n\t\treturn JSON.parse(value)\n\tif (value === undefined)\n\t\treturn {}\n\n\treturn value\n}\n\nconst jsonType = {\n\ttype: {\n\t\ttype: \"json\",\n\t},\n\tonSerialize\t: toJson,\n\tonCreate\t: toJson,\n\tonUpdate\t: toJson,\n\tonSave\t\t: ({value}) => value ? JSON.stringify(value) : value,\n\tonRetrieve\t: toJson,\n} as ModelTypeInterface\n\nexport default jsonType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toInt = ({value, args}) => {\n\tconst format = parseInt(value)\n\n\tif (args) {\n\t\tif (args.max && args.max < format)\n\t\t\treturn args.max\n\t\tif (args.min && args.min > format)\n\t\t\treturn args.min\n\t}\n\n\treturn format\n}\n\nconst smallIntType = {\n\ttype: {\n\t\ttype: \"smallint\",\n\t},\n\n\tonCreate\t: toInt,\n\tonUpdate\t: toInt,\n\tonSave\t\t: toInt,\n\tonRetrieve\t: toInt,\n} as ModelTypeInterface\n\nexport default smallIntType","// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toString = ({value, args}) => {\n\tconst format = (value === undefined || value === null) ? \"\":`${value}`\n\n\tif (args) {\n\t\tif (args.max && args.max < format.length)\n\t\t\treturn format.substring(0, args.max)\n\t}\n\n\treturn format\n}\n\nconst textType = {\n\ttype: {\n\t\ttype: \"text\",\n\t},\n\tonCreate\t: toString,\n\tonUpdate\t: toString,\n\tonSave\t\t: toString,\n\tonRetrieve\t: toString,\n} as ModelTypeInterface\n\nexport default textType","// Packages\nimport { DateTime } from \"luxon\"\n\n// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toDate = ({value}) => {\n\tif (DateTime.isDateTime(value))\n\t\treturn value\n\tif (typeof value === \"string\")\n\t\treturn DateTime.fromISO(value)\n\tif (typeof value === \"number\")\n\t\treturn DateTime.fromMillis(value)\n\tif (value instanceof Date)\n\t\treturn DateTime.fromJSDate(value)\n\n\treturn value\n}\n\nconst toSerializeDate = ({value, args}) => {\n\tconst format = DateTime.isDateTime(value) ? value : DateTime.fromJSDate(value)\n\n\tif (args) {\n\t\tif (args.format) {\n\t\t\treturn format.toFormat(args.format)\n\t\t}\n\t}\n\n\treturn format.toISOTime()\n}\n\nconst timeType = {\n\ttype: {\n\t\ttype: \"time\",\n\t},\n\tonCreate\t: toDate,\n\tonRetrieve\t: toDate,\n\tonSave\t\t: toSerializeDate,\n\tonSerialize\t: toSerializeDate,\n} as ModelTypeInterface\n\nexport default timeType","// Packages\nimport { DateTime } from \"luxon\"\n\n// Interfaces\nimport ModelTypeInterface from \"../../interfaces/modelType\"\n\nconst toDate = ({value}) => {\n\tif (DateTime.isDateTime(value))\n\t\treturn value\n\tif (typeof value === \"string\")\n\t\treturn DateTime.fromSeconds(parseInt(value))\n\tif (typeof value === \"number\")\n\t\treturn DateTime.fromMillis(value)\n\tif (value instanceof Date)\n\t\treturn DateTime.fromJSDate(value)\n\n\treturn value\n}\n\nconst toSerializeDate = ({value}) => {\n\tif (value) {\n\t\tconst format = DateTime.isDateTime(value) ? value : DateTime.fromJSDate(value)\n\n\t\treturn format.toFormat(\"yyyy-LL-dd HH:mm:ss\")\n\t}\n\n\treturn value\n}\n\nconst timestampType = {\n\ttype: {\n\t\ttype: \"timestamp\",\n\t},\n\tonCreate\t: toDate,\n\tonRetrieve\t: toDate,\n\tonSave\t\t: toSerializeDate,\n\tonSerialize\t: toSerializeDate,\n} as ModelTypeInterface\n\nexport default timestampType","// interfaces\nimport ModelTypeInterface from \"../interfaces/modelType\"\n\n// Types\nimport stringType from \"./string/index\"\nimport intType from \"./int\"\nimport dateType from \"./date\"\nimport booleanType from \"./boolean\"\nimport floatType from \"./float\"\nimport hashType from \"./hash\"\nimport sidType from \"./sid\"\nimport uuidType\tfrom \"./uuid\"\nimport bigIntType from \"./bigInt\"\nimport datetimeType from \"./datetime\"\nimport idType from \"./id\"\nimport jsonType from \"./json\"\nimport smallIntType from \"./smallInt\"\nimport textType from \"./text\"\nimport timeType from \"./time\"\nimport timestampType from \"./timestamp\"\nimport enumType\tfrom \"./timestamp\"\n\nlet typesList: Record<string, ModelTypeInterface> = {\n\tbigint: bigIntType,\n\tboolean: booleanType,\n\tdate: dateType,\n\tdatetime: datetimeType,\n\tfloat: floatType,\n\thash: hashType,\n\tid: idType,\n\tint: intType,\n\tjson: jsonType,\n\tsid: sidType,\n\tsmallint: smallIntType,\n\tstring: stringType,\n\ttext: textType,\n\ttime: timeType,\n\ttimestamp: timestampType,\n\tuuid: uuidType,\n\tenum: enumType,\n}\n\n// -------------------------------------------------\n// Methods\n// -------------------------------------------------\n\nexport const clear = () => typesList = {}\nexport const add = (name: string, modelType: ModelTypeInterface) => typesList[name] = modelType\nexport const get = (name: string) => typesList[name]\nexport const all = () => typesList\n\nexport default {\n\tclear,\n\tadd,\n\tget,\n\tall,\n}","import { Model } from \"../\"\n\n// Interfaces\nimport RelationDataInterface from \"../interfaces/relationData\"\n\nexport default function foreignHandler(this: Model, foreign: RelationDataInterface) {\n\t// -------------------------------------------------\n\t// belongsTo\n\t// -------------------------------------------------\n\n\tif (foreign.type === \"belongsTo\") {\n\t\treturn {\n\t\t\tget: async () => {\n\t\t\t\tconst key = this.$values[foreign.foreignKey || \"id\"] as string\n\n\t\t\t\tif (key) {\n\t\t\t\t\treturn foreign.model().find(key as string)\n\t\t\t\t}\n\n\t\t\t\treturn undefined\n\t\t\t},\n\t\t\tset: (value: string | number | Model) => {\n\t\t\t\tif (value && (value as Model).$values)\n\t\t\t\t\tthis.$values[foreign.foreignKey] = (value as Model).$values[foreign.primaryKey || \"id\"]\n\t\t\t\telse\n\t\t\t\t\tthis.$values[foreign.foreignKey] = value\n\t\t\t},\n\t\t\tvalue: () => {\n\t\t\t\treturn this.$values[foreign.foreignKey]\n\t\t\t},\n\t\t}\n\t}\n\n\t// -------------------------------------------------\n\t// hasMany\n\t// -------------------------------------------------\n\n\tif (foreign.type === \"hasMany\") {\n\t\treturn {\n\t\t\tcreate: async (fields?: Record<string, unknown>) => {\n\t\t\t\tconst model \t\t\t\t\t\t\t= foreign.model()\n\t\t\t\tconst instance \t\t\t\t\t\t\t= new model()\n\t\t\t\tinstance.$values[foreign.foreignKey] \t= this.$values[foreign.primaryKey || \"id\"] as string\n\t\t\t\tif (fields) instance.fill(fields)\n\t\t\t\tawait instance.save()\n\n\t\t\t\treturn instance\n\t\t\t},\n\t\t\tget: () => {\n\t\t\t\treturn foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string).get()\n\t\t\t},\n\t\t\tfind:(id: string | number) => {\n\t\t\t\treturn foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string).where(foreign.model().$primary || \"id\", id).first()\n\t\t\t},\n\t\t\tquery:() => {\n\t\t\t\treturn foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string)\n\t\t\t},\n\t\t}\n\t}\n\n\t// -------------------------------------------------\n\t// hasOne\n\t// -------------------------------------------------\n\n\tif (foreign.type === \"hasOne\") {\n\t\treturn {\n\t\t\tfindOrCreate: async (fields?: Record<string, unknown>) => {\n\t\t\t\tconst saved = await foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string).first()\n\n\t\t\t\tif (saved) return saved\n\n\t\t\t\tconst model \t\t\t\t\t\t\t= foreign.model()\n\t\t\t\tconst instance \t\t\t\t\t\t\t= new model()\n\t\t\t\tinstance.$values[foreign.foreignKey] \t= this.$values[foreign.primaryKey || \"id\"] as string\n\t\t\t\tif (fields) instance.fill(fields)\n\t\t\t\tawait instance.save()\n\n\t\t\t\treturn instance\n\t\t\t},\n\t\t\tget: () => {\n\t\t\t\treturn foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string).first()\n\t\t\t},\n\t\t\tdelete: async () => {\n\t\t\t\tawait foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string).delete()\n\t\t\t},\n\t\t\tquery:() => {\n\t\t\t\treturn foreign.model().query().where(foreign.foreignKey, this.$values[foreign.primaryKey || \"id\"] as string)\n\t\t\t},\n\t\t}\n\t}\n\n\treturn undefined\n}","// Packages\nimport query, { AbstractQuery } from \"@acai/query\"\nimport { CustomException } \t\tfrom \"@acai/utils\"\n\n// Interfaces\nimport FieldInfoInterface \t\tfrom \"../interfaces/fieldInfo\"\nimport RelationDataInterface \tfrom \"../interfaces/relationData\"\n\n// Types\nimport * as dynamicTypes from \"../types/index\"\n\n// Utils\nimport foreignHandler from \"../utils/foreignHandler\"\n\nexport default class Model {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\t// static\n\tpublic static $table\t\t: string;\n\tpublic static $primary\t\t = \"id\";\n\tpublic static $fields\t\t: FieldInfoInterface[] = [];\n\tpublic static $relations\t: RelationDataInterface[] = [];\n\n\t// instance\n\tpublic $values: Record<string, unknown> = {};\n\tpublic $databaseInitialized = false;\n\n\t// -------------------------------------------------\n\t// Main Methods\n\t// -------------------------------------------------\n\n\tpublic constructor (fields: any | undefined = undefined, databaseSaved = false) {\n\t\tconst modelClass\t\t\t= this.constructor.prototype as {$fields: FieldInfoInterface[]; $relations: RelationDataInterface[]}\n\t\tconst $allFields \t\t\t= modelClass.$fields\n\t\tthis.$databaseInitialized \t= databaseSaved\n\n\t\t// set fields\n\t\tif ($allFields) {\n\t\t\tfor (let i = 0; i < $allFields.length; i++) {\n\t\t\t\tconst field \t= $allFields[i]\n\t\t\t\tconst foreign\t= (modelClass.$relations || []).find((i) => i.name === field.name)\n\t\t\t\tconst handler \t= foreign ? foreignHandler : undefined\n\n\t\t\t\t// define custom getter\n\t\t\t\tObject.defineProperty(this, field.name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tset: (value) => {\n\t\t\t\t\t\t// not a foreign\n\t\t\t\t\t\tif (!foreign) {\n\t\t\t\t\t\t\tconst dynamictype \t\t\t= dynamicTypes.get(field.type)\n\t\t\t\t\t\t\tconst callback \t\t\t\t= databaseSaved ? dynamictype.onRetrieve : dynamictype.onCreate\n\t\t\t\t\t\t\tthis.$values[field.name] \t= callback ? callback({key: field.name, value, row: this.$values as any, args: field.args, model: this.constructor as any}) : value\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (foreign.type === \"belongsTo\") {\n\t\t\t\t\t\t\tthis.$values[foreign.foreignKey] = value\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\t// custom getter\n\t\t\t\t\t\tif (handler) {\n\t\t\t\t\t\t\treturn handler.bind(this)(foreign!)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// not a foreign\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn this.$values[field.name]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tif (fields) this.fill(fields)\n\t}\n\n\n\tpublic toObject <T extends typeof Model, I = InstanceType<T>> () : I {\n\t\tconst serializedValues = {} as I\n\n\t\tthis.constructor.prototype.$fields.forEach(field => {\n\t\t\tconst value \t= this.$values[field.name]\n\t\t\tconst onSet \t= dynamicTypes.get(field.type).onSerialize\n\t\t\tconst foreign\t= (this.constructor.prototype.$relations || []).find(i => i.name === field.name)\n\n\t\t\tif (foreign) {\n\t\t\t\tif (foreign.type === \"belongsTo\") {\n\t\t\t\t\tserializedValues[foreign.foreignKey] = this.$values[foreign.foreignKey]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tserializedValues[field.name] = onSet ? onSet({key: field.name, value, row: this.$values as any, args: field.args, model: this.constructor as any}):value\n\t\t\t}\n\t\t})\n\n\t\treturn serializedValues\n\t}\n\n\tpublic toJson () {\n\t\treturn JSON.stringify(this.toObject())\n\t}\n\n\t// -------------------------------------------------\n\t// Query methods\n\t// -------------------------------------------------\n\n\tpublic static query <T extends typeof Model, I = InstanceType<T>> (this: T): AbstractQuery<I> {\n\t\treturn query().table(this.$table).parseResult((result: unknown) => {\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\treturn result.map(r => {\n\t\t\t\t\treturn new this({...r}, true)\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn new this({...result as Record<string, unknown>}, true)\n\t\t}) as unknown as AbstractQuery<I>\n\t}\n\n\tpublic query <T extends typeof Model> (this: InstanceType<T>): AbstractQuery<InstanceType<T>> {\n\t\treturn query().table((this as any).constructor.$table).parseResult((result: unknown) => {\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\treturn result.map(r => {\n\t\t\t\t\treturn new (this as any).prototype.constructor({...r}, true)\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn new (this as any)({...(result as Record<string, unknown>)}, true)\n\t\t}) as unknown as AbstractQuery<InstanceType<T>>\n\t}\n\n\tpublic static async paginate <T extends typeof Model, I = InstanceType<T>> (this: T, page = 1, perPage = 25) {\n\t\treturn this.query().paginate<I>(page, perPage)\n\t}\n\n\tpublic static async find <T extends typeof Model, I = InstanceType<T>> (this: T, id: string | number): Promise<I | undefined> {\n\t\treturn (await this.query().orderBy(this.$primary).where(this.$primary, id).limit(1).get())[0] as unknown as I | undefined\n\t}\n\n\tpublic static async findOrFail <T extends typeof Model, I = InstanceType<T>> (this: T, id: string | number): Promise<I> {\n\t\tconst response = (await this.query().orderBy(this.$primary).where(this.$primary, id).limit(1).get())[0] as unknown as I\n\n\t\tif (!response) {\n\t\t\tthrow new CustomException(\"modelNotFound\", `Model ${this.name} with ${this.$primary} ${id} not found`, {\n\t\t\t\tmodel\t\t: this.name,\n\t\t\t\tprimaryKey\t: this.$primary,\n\t\t\t\tid\t\t\t: id,\n\t\t\t})\n\t\t}\n\n\t\treturn response as I\n\t}\n\n\tpublic static async first <T extends typeof Model> (this: T): Promise<InstanceType<T> | undefined> {\n\t\treturn this.query().first()\n\t}\n\n\tpublic static async last <T extends typeof Model, I = InstanceType<T>> (this: T): Promise<I | undefined> {\n\t\treturn this.query().last<I>()\n\t}\n\n\tpublic static async insert <T extends typeof Model, I extends InstanceType<T> = InstanceType<T>> (this: T, fields: Partial<InstanceType<T>>): Promise<I> {\n\t\tconst instance = new this()\n\t\tinstance.fill(fields)\n\t\tawait instance.save()\n\t\treturn instance as I\n\t}\n\n\tpublic static async insertMany <T extends typeof Model, I = InstanceType<T>> (this: T, rows: Partial<InstanceType<T>>[]): Promise<I[]> {\n\t\treturn Promise.all(rows.map(i => this.insert(i))) as Promise<I[]>\n\t}\n\n\tpublic static async updateMany <T extends typeof Model, I = InstanceType<T>> (this: T, models: Record<string, InstanceType<T>> | [string, InstanceType<T>]) {\n\t\tconst normalized = Array.isArray(models) ? models : Object.entries(models)\n\n\t\tPromise.all(normalized.map(entry => void this.query().where(this.$primary, entry[0]).update(entry[1])))\n\t}\n\n\t// -------------------------------------------------\n\t// Migration methods\n\t// -------------------------------------------------\n\n\tpublic static addMigration () {\n\t\tconst fields = {};\n\n\t\t// map fields\n\t\t(this.prototype as unknown as {$fields: FieldInfoInterface[]}).$fields.forEach(field => {\n\t\t\tconst typeObj = {...(dynamicTypes.get(field.type).type || {type: \"string\"}), ...field.args}\n\n\t\t\tfields[field.name] = {\n\t\t\t\t...typeObj,\n\t\t\t\tprimary: this.$primary === field.name,\n\t\t\t}\n\n\t\t\tconst { $relations } = (this.prototype as unknown as {$relations?: RelationDataInterface[]})\n\n\t\t\t// check foreign key\n\t\t\tif ($relations) {\n\t\t\t\t$relations.forEach(foreign => {\n\t\t\t\t\tif (foreign.name === field.name) {\n\t\t\t\t\t\t// unset field because we won't be using it\n\t\t\t\t\t\tdelete fields[field.name]\n\n\t\t\t\t\t\tif (foreign.type === \"belongsTo\") {\n\t\t\t\t\t\t\tconst primary \t\t= foreign.primaryKey || foreign.model().$primary\n\t\t\t\t\t\t\tconst primaryType \t= (foreign.model().prototype as any).$fields.find(i => i.name === primary)\n\t\t\t\t\t\t\tconst typeObj \t\t= {...(dynamicTypes.get(primaryType.type).type || {type: \"string\"}), ...field.args}\n\n\t\t\t\t\t\t\t// add foreign key\n\t\t\t\t\t\t\tfields[foreign.foreignKey] = {\n\t\t\t\t\t\t\t\t...typeObj,\n\t\t\t\t\t\t\t\tforeign: {\n\t\t\t\t\t\t\t\t\ttable\t: foreign.model().$table,\n\t\t\t\t\t\t\t\t\tcolumn\t: primary,\n\t\t\t\t\t\t\t\t\tonDelete: \"CASCADE\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tquery().addMigration(this.$table, fields)\n\t}\n\n\t// -------------------------------------------------\n\t// Instance methods\n\t// -------------------------------------------------\n\n\tpublic async save () {\n\t\tconst { $table, $primary } \t= this.constructor as any\n\t\tconst { $fields } \t\t\t= this.constructor.prototype as any\n\n\t\t// get fields\n\t\tconst fields = {}\n\t\tfor (let i = 0; i < $fields.length; i++) {\n\t\t\tconst field \t= $fields[i]\n\t\t\tconst value \t= this.$values[field.name]\n\t\t\tconst onSet \t= dynamicTypes.get(field.type).onSave\n\t\t\tconst foreign\t= (this.constructor.prototype.$relations || []).find(i => i.name === field.name)\n\n\t\t\tif (foreign) {\n\t\t\t\tif (foreign.type === \"belongsTo\") {\n\t\t\t\t\tfields[foreign.foreignKey] = this.$values[foreign.foreignKey]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfields[field.name] = onSet ? onSet({key: field.name, value, row: this.$values as any, args: field.args, model: this.constructor as any}):value\n\t\t\t}\n\t\t}\n\n\t\t// already on database, just update\n\t\tlet id\n\t\tif (this.$databaseInitialized) {\n\t\t\tawait query().table($table).where($primary, fields[$primary] as string).update(fields)\n\t\t\tid = fields[$primary]\n\t\t}\n\t\t// not on database, create\n\t\telse {\n\t\t\tid = await query().table($table).insert(fields) || fields[$primary]\n\t\t\tthis.$databaseInitialized = true\n\t\t}\n\n\t\t// update fields\n\t\tconst updatedFields = await query().table($table).where($primary, id).first() as any\n\t\tif (updatedFields) this.fill(updatedFields)\n\t}\n\n\tpublic async delete () {\n\t\tconst { $table, $primary } \t= this.constructor as any\n\n\t\t// only should delete if already on database\n\t\tif (this.$databaseInitialized) {\n\t\t\tawait query().table($table).where($primary, this.$values[$primary] as string).delete()\n\t\t}\n\n\t\tthis.$databaseInitialized = false\n\t}\n\n\tpublic fill <T extends typeof Model, I = InstanceType<T>> (this: I, fields: Partial<Omit<I, keyof Model>> & {[k in string]: any}) {\n\t\tconst $allFields \t\t= ((this as any).constructor.prototype as {$fields?: FieldInfoInterface[]}).$fields || []\n\t\tconst { $relations } \t= ((this as any).constructor.prototype as {$relations: RelationDataInterface[]})\n\n\t\t// set fields\n\t\tfor (let i = 0; i < $allFields.length; i++) {\n\t\t\tconst field \t= $allFields[i]\n\t\t\tconst foreign \t= ($relations || []).find(i => i.name === field.name)\n\n\t\t\tif (foreign && foreign.type === \"belongsTo\") {\n\t\t\t\tif (fields[foreign.foreignKey] || fields[field.name]) {\n\t\t\t\t\tthis[field.name].set(fields[foreign.foreignKey] || fields[field.name])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis[field.name] = (fields || {})[field.name]\n\t\t\t}\n\t\t}\n\t}\n}\n","// Modules\nimport Model from \"./Model\"\n\nconst models = [] as typeof Model[]\n\nconst ModelDecorator = (table: string, primary = \"id\"): ClassDecorator => {\n\treturn (target) => {\n\t\tconst model \t= target as unknown as typeof Model\n\t\tmodel.$table \t= table\n\t\tmodel.$primary\t= primary\n\n\t\tmodels.push(model)\n\t}\n}\n\nexport default ModelDecorator\n\nexport const getModels = () => models","// Interfaces\nimport FieldInfoInterface from \"../interfaces/fieldInfo\"\n\nconst Field = (type = \"string\", args?: Record<string, string | number | boolean | string[]> | string[]): PropertyDecorator => {\n\treturn (target, key) => {\n\t\tconst model = target.constructor.prototype as { $fields?: FieldInfoInterface[] }\n\n\t\tif (!model.$fields) model.$fields = []\n\n\t\tconst extraargs = {} as Record<string, string | boolean>\n\t\tif (type.match(/^\\w+\\?/))\textraargs.nullable \t= true\n\t\tif (type.match(/^\\w+\\*/))\textraargs.primary \t= true\n\t\tif (type.match(/^\\w+!/))\textraargs.unique \t= true\n\t\tif (type.match(/^\\w+=/))\textraargs.default \t= type.split(\"=\")[1]\n\n\t\tmodel.$fields.push({\n\t\t\tname: key as string,\n\t\t\ttype: (type.match(/^\\w+/) as string[])[0],\n\t\t\targs: {...(Array.isArray(args) ? {length:args}: args), ...extraargs},\n\t\t})\n\t}\n}\n\nexport default Field","// Interfaces\nimport FieldInfoInterface \tfrom \"../interfaces/fieldInfo\"\nimport RelationDataInterface \tfrom \"../interfaces/relationData\"\n\n// Parts\nimport Model from \"./Model\"\n\nconst HasOne = (modelcb:() => typeof Model, foreignKey: string, primaryKey?: string): PropertyDecorator => {\n\treturn (target, key) => {\n\t\tconst thismodel \t= target.constructor.prototype as { $fields?: FieldInfoInterface[]; $relations?: RelationDataInterface[] }\n\n\t\tif (!thismodel.$fields) \tthismodel.$fields \t\t= []\n\t\tif (!thismodel.$relations)\tthismodel.$relations \t= []\n\n\t\t// field that links the two models is in another model, so we don't need to instance it\n\t\tthismodel.$fields.push({name: key as string, type: \"string\", args:{}})\n\n\t\t// add relation\n\t\tthismodel.$relations.push({\n\t\t\tmodel\t\t: modelcb,\n\t\t\ttype\t\t: \"hasOne\",\n\t\t\tname\t\t: key as string,\n\t\t\tprimaryKey\t: primaryKey || \"id\",\n\t\t\tforeignKey,\n\t\t})\n\t}\n}\n\nexport default HasOne","// Interfaces\nimport FieldInfoInterface \tfrom \"../interfaces/fieldInfo\"\nimport RelationDataInterface \tfrom \"../interfaces/relationData\"\n\n// Parts\nimport Model from \"./Model\"\n\nconst HasOne = (modelcb:() => typeof Model, foreignKey: string, primaryKey?: string): PropertyDecorator => {\n\treturn (target, key) => {\n\t\tconst thismodel \t= target.constructor.prototype as { $fields?: FieldInfoInterface[]; $relations?: RelationDataInterface[] }\n\n\t\tif (!thismodel.$fields) \tthismodel.$fields \t\t= []\n\t\tif (!thismodel.$relations)\tthismodel.$relations \t= []\n\n\t\t// field that links the two models is in another model, so we don't need to instance it\n\t\tthismodel.$fields.push({name: key as string, type: \"string\", args:{}})\n\n\t\t// add relation\n\t\tthismodel.$relations.push({\n\t\t\tmodel\t\t: modelcb,\n\t\t\ttype\t\t: \"hasMany\",\n\t\t\tname\t\t: key as string,\n\t\t\tprimaryKey\t: primaryKey || \"id\",\n\t\t\tforeignKey,\n\t\t})\n\t}\n}\n\nexport default HasOne","// Interfaces\nimport FieldInfoInterface \tfrom \"../interfaces/fieldInfo\"\nimport RelationDataInterface \tfrom \"../interfaces/relationData\"\n\n// Parts\nimport Model from \"./Model\"\n\nconst BelongsTo = (modelcb:() => typeof Model, foreignKey: string, primaryKey?: string): PropertyDecorator => {\n\treturn (target, key) => {\n\t\tconst thismodel \t= target.constructor.prototype as { $fields?: FieldInfoInterface[]; $relations?: RelationDataInterface[] }\n\n\t\tif (!thismodel.$fields) \tthismodel.$fields \t\t= []\n\t\tif (!thismodel.$relations)\tthismodel.$relations \t= []\n\n\t\tconst extraargs = {} as Record<string, string | boolean>\n\t\tif (foreignKey.match(/^\\w+\\?/)) extraargs.nullable \t= true\n\t\tif (foreignKey.match(/^\\w+!/))\textraargs.unique \t= true\n\n\t\t// add field that will store the relation data\n\t\tthismodel.$fields.push({name: key as string, type: \"string\", args:extraargs})\n\n\t\t// add relation\n\t\tthismodel.$relations.push({\n\t\t\tmodel\t\t: modelcb,\n\t\t\ttype\t\t: \"belongsTo\",\n\t\t\tname\t\t: key as string,\n\t\t\tforeignKey\t: (foreignKey.match(/^\\w+/) as string[])[0],\n\t\t\tprimaryKey\t: primaryKey || \"id\",\n\t\t})\n\t}\n}\n\nexport default BelongsTo","/**\r\n* Copyright (c) 2020 The Nuinalp and APO Softworks Authors. All rights reserved.\r\n* Use of this source code is governed by a BSD-style license that can be\r\n* found in the LICENSE file.\r\n*/\r\n\r\n// model\r\nexport {default as Model} \tfrom \"./modules/Model\"\r\nexport {default as Table} \tfrom \"./modules/ModelDecorator\"\r\n\r\n// typings\r\nexport { default as typeManager } from \"./types\"\r\n\r\n// extra\r\nexport { getModels } \t\t\tfrom \"./modules/ModelDecorator\"\r\nexport { default as Hasher } \tfrom \"./utils/Hasher\"\r\nexport { default as Relation }\tfrom \"./interfaces/relation\"\r\n\r\n// Field and relations\r\nimport FieldDecoratorInterface \tfrom \"./interfaces/fieldDecorator\"\r\nimport _Field \t\t\t\t\tfrom \"./modules/FieldDecorator\"\r\nimport _HasOne \t\t\t\t\tfrom \"./modules/HasOneDecorator\"\r\nimport _HasMany\t\t\t\t\tfrom \"./modules/HasManyDecorator\"\r\nimport _BelongsTo\t\t\t\tfrom \"./modules/BelongsToDecorator\"\r\n\r\nexport const Field \t= _Field as FieldDecoratorInterface\r\nField.hasOne \t\t= _HasOne\r\nField.hasMany\t\t= _HasMany\r\nField.belongsTo\t\t= _BelongsTo\r\n"],"names":["DateTime","hashSync","compareSync","config","uuid","DateTime2","DateTime3","DateTime4","query","CustomException"],"mappings":"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"}