{"version":3,"file":"index.es.js","sources":["../src/utils/parseArgs.ts","../src/utils/getStubs.ts","../src/modules/Stubber.ts","../src/utils/listStubs.ts","../src/index.ts"],"sourcesContent":["export default function parseArgs (args: string[]) {\n\tconst variables \t= {} as Record<string, string>\n\tconst [stub, name] \t= args\n\n\targs.splice(1).forEach(item => {\n\t\tconst [name, value] = item.split(\"=\")\n\t\tvariables[name] \t= value || \"\"\n\t})\n\n\treturn {\n\t\tstubName: stub,\n\t\tstubArgs: {...variables, name},\n\t}\n}","// Packages\nimport * as fs \t\tfrom \"fs\"\nimport * as path \tfrom \"path\"\n\nexport default function getStubs(stubFilesPath: string) {\n\tconst stubpath = path.join(process.cwd(), stubFilesPath)\n\n\t// find stubs directory\n\tif (!fs.existsSync(stubpath)) {\n\t\tthrow new Error(\"Stubs directory does not exist\")\n\t}\n\n\t// check if is an actual directory\n\tif (!fs.lstatSync(stubpath).isDirectory()) {\n\t\tthrow new Error(\"Stubs directory is not a directory\")\n\t}\n\n\t// read its content\n\tconst stubsAvailable = fs.readdirSync(stubpath, {withFileTypes: true}).filter( i => i.isDirectory())\n\n\n\tfor (let i = 0; i < stubsAvailable.length; i++) {\n\t\tconst item \t\t\t\t= stubsAvailable[i]\n\t\tconst configFilePath \t= path.join(stubpath, item.name, \"stub.config.json\")\n\n\t\t// check config file\n\t\tif (!fs.existsSync(configFilePath)) {\n\t\t\tthrow new Error(`Stub ${item.name} does not have a config file`)\n\t\t}\n\n\t\t// load config file\n\t\ttry {\n\t\t\tJSON.parse(fs.readFileSync(configFilePath, {encoding: \"utf-8\"}))\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new Error(`Stub ${item.name} config is not a valid JSON`)\n\t\t}\n\t}\n\n\treturn stubsAvailable\n}","// Packages\nimport * as fs \t\tfrom \"fs\"\nimport * as path \tfrom \"path\"\nimport { glob } \tfrom \"glob\"\n\n// Interfaces\nimport StubConfigInterface from \"../interfaces/stubConfig\"\n\n// Utils\nimport parseArgs from \"../utils/parseArgs\"\nimport getStubs from \"../utils/getStubs\"\n\nexport default class Stubber {\n\t// -------------------------------------------------\n\t// Properties\n\t// -------------------------------------------------\n\n\tprotected callArgs\t\t\t: ReturnType<typeof parseArgs>;\n\tprotected stubConfig\t\t: StubConfigInterface;\n\tprotected stubFileContent\t: string[];\n\tprotected stubOriginPath\t: string;\n\n\t// -------------------------------------------------\n\t// Constructor\n\t// -------------------------------------------------\n\n\tpublic constructor (args: string[], stubFilesPath = \"\", overwriteTargetPath?: string) {\n\t\tconst stubpath = path.join(process.cwd(), stubFilesPath)\n\n\t\t// find stubs directory\n\t\tif (!fs.existsSync(stubpath)) {\n\t\t\tthrow \"Stubs directory does not exist\"\n\t\t}\n\n\t\t// check if is an actual directory\n\t\tif (!fs.lstatSync(stubpath).isDirectory()) {\n\t\t\tthrow \"Stubs directory is not a directory\"\n\t\t}\n\n\t\t// read its content\n\t\tconst stubsAvailable = fs.readdirSync(stubpath, {withFileTypes: true}).filter( i => i.isDirectory())\n\n\t\t// parse arguments\n\t\tthis.callArgs \t= parseArgs(args)\n\t\tconst stubs \t= getStubs(stubFilesPath)\n\n\t\tfor (let i = 0; i < stubs.length; i++) {\n\t\t\tconst item \t\t\t\t= stubsAvailable[i]\n\t\t\tconst configFilePath \t= path.join(stubpath, item.name, \"stub.config.json\")\n\n\t\t\t// load config file\n\t\t\tconst config = JSON.parse(fs.readFileSync(configFilePath, {encoding: \"utf-8\"})) as StubConfigInterface\n\n\t\t\tif (config.name === this.callArgs.stubName) {\n\t\t\t\tthis.stubConfig \t= config\n\t\t\t\tthis.stubOriginPath = path.join(stubpath, item.name).replace(/(\\\\|\\/|\\\\\\\\|\\/\\/)/g, \"/\")\n\n\t\t\t\t// load all files inside of the stub directory\n\t\t\t\tthis.stubFileContent = glob.sync(path.join(this.stubOriginPath, \"**/*\"), {nodir: true})\n\n\t\t\t\t// stub found, break find\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// stub not found\n\t\tif (!this.stubConfig) {\n\t\t\tthrow `Search for the stub ${this.callArgs.stubName} did not return any results`\n\t\t}\n\n\t\t// update target path\n\t\tif (overwriteTargetPath) this.stubConfig.targetPath = overwriteTargetPath\n\t}\n\n\t// -------------------------------------------------\n\t// Copy stub\n\t// -------------------------------------------------\n\n\tpublic copy() {\n\t\tconst targetPath = this.stubConfig.targetPath\n\n\t\tif (!targetPath) {\n\t\t\tthrow `Stub ${this.stubConfig.name} does not have a target path, stubber doesn't know where to put it`\n\t\t}\n\n\t\t// copy all files\n\t\tthis.stubFileContent.forEach(item => {\n\t\t\tconst shouldBeRenamed\t= !!(this.stubConfig.renameToNameFiles && this.stubConfig.renameToNameFiles.find(i => i === item.replace(/(\\\\|\\/)/g, \"/\").replace(this.stubOriginPath, \"\").split(\"/\").splice(1).join(\"/\")))\n\t\t\tconst relativepath \t\t= item.replace(/(\\\\|\\/)/g, \"/\").replace(this.stubOriginPath, \"\").replace(shouldBeRenamed ? /\\/\\w+\\./:\"\", shouldBeRenamed ? `/${this.callArgs.stubArgs.name}.`:\"\")\n\t\t\tconst targetfinalpath\t= path.join(process.cwd(), targetPath, relativepath).replace(/(\\\\|\\/)/g, \"/\")\n\n\t\t\t// skip config, we don't want to copy that\n\t\t\tif (relativepath === \"/stub.config.json\") return\n\n\t\t\t// make sure the directory exists\n\t\t\t{\n\t\t\t\tconst pathfile = targetfinalpath.substring(0, targetfinalpath.lastIndexOf(\"/\"))\n\t\t\t\tif (!fs.existsSync(pathfile)){\n\t\t\t\t\tfs.mkdirSync(pathfile, {recursive: true})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// copy it\n\t\t\tfs.copyFileSync(item, targetfinalpath)\n\t\t})\n\t}\n\n\t// -------------------------------------------------\n\t// Variable injection\n\t// -------------------------------------------------\n\n\tpublic inject (extraVariables?: Record<string, string>) {\n\t\tconst allVariables = { ...this.stubConfig.variables, ...this.callArgs.stubArgs, ...(extraVariables || {})}\n\n\t\t// loop all files\n\t\tthis.stubFileContent.forEach(item => {\n\t\t\tconst shouldBeRenamed\t= !!(this.stubConfig.renameToNameFiles && this.stubConfig.renameToNameFiles.find(i => i === item.replace(/(\\\\|\\/)/g, \"/\").replace(this.stubOriginPath, \"\").split(\"/\").splice(1).join(\"/\")))\n\t\t\tconst relativepath \t\t= item.replace(/(\\\\|\\/)/g, \"/\").replace(this.stubOriginPath, \"\").replace(shouldBeRenamed ? /\\/\\w+\\./:\"\", shouldBeRenamed ? `/${this.callArgs.stubArgs.name}.`:\"\")\n\t\t\tconst targetfinalpath\t= path.join(process.cwd(), this.stubConfig.targetPath, relativepath).replace(/(\\\\|\\/)/g, \"/\")\n\n\t\t\t// skip config, we don't want to copy that\n\t\t\tif (relativepath === \"/stub.config.json\") return\n\n\t\t\t// get file content\n\t\t\tlet content = fs.readFileSync(targetfinalpath, { encoding: \"utf-8\" })\n\n\t\t\t// parse all variables\n\t\t\tconst variables = (content.match(/{{\\s*\\S+\\s*}}/g) || [])\n\n\t\t\t// exchange all variables\n\t\t\tvariables.forEach(variable => {\n\t\t\t\tconst varname \t= variable.replace(/({{|}})/g, \"\").trim()\n\t\t\t\tconst varvalue\t= allVariables[varname]\n\n\t\t\t\tif (!varvalue) {\n\t\t\t\t\tconsole.log(`\\x1b[33mwarning\\x1b[0m - variable ${varname} not found, passing an empty string`)\n\t\t\t\t}\n\n\t\t\t\tcontent = content.replace(new RegExp(`${variable}`), varvalue || \"\")\n\t\t\t})\n\n\t\t\t// save back the updated content\n\t\t\tfs.writeFileSync(targetfinalpath, content, { encoding: \"utf-8\" })\n\t\t})\n\t}\n}","// Packages\nimport * as fs \t\tfrom \"fs\"\nimport * as path \tfrom \"path\"\n\n// Interfaces\nimport StubConfigInterface from \"../interfaces/stubConfig\"\n\n// Utils\nimport getStubs from \"./getStubs\"\n\nexport default function listStubs (stubpath: string) {\n\tconst stubs \t= getStubs(stubpath)\n\n\tstubs.forEach((item) => {\n\t\tconst configFilePath \t= path.join(process.cwd(), stubpath, item.name, \"stub.config.json\")\n\n\t\t// load config file\n\t\tconst config = JSON.parse(fs.readFileSync(configFilePath, {encoding: \"utf-8\"})) as StubConfigInterface\n\t\tconsole.log(`\\nstub: ${config.name}`)\n\t\tif (config.description) console.log(\"description:\", config.description.length > 70 ? `${config.description.substring(0, 70)}...`:config.description)\n\t})\n}","/**\r\n* Copyright (c) 2020 The Nuinalp and APO Softworks Authors. All rights reserved.\r\n* Use of this source code is governed by a BSD-style license that can be\r\n* found in the LICENSE file.\r\n*/\r\n\r\nimport Stubber \t\tfrom \"./modules/Stubber\"\r\nimport listStubs \tfrom \"./utils/listStubs\"\r\n\r\nconst [action, ...args] = process.argv.splice(2)\r\n\r\nif (!action) {\r\n\tconsole.log(\"\")\r\n\tconsole.log(\"\\x1b[47m\\x1b[30m Welcome to the stubber \\x1b[0m\\n\")\r\n\tconsole.log(\"Stubber is part of the \\x1b[4m\\x1b[35mAçaí framework\\x1b[37m and is used to easily create commonly used files, such as controllers, middlewares or components. You can checkout the help or commands action to see how to use it. You can chekout a more detailed documentation at: https://github.com/AcaiFramework/stubber\")\r\n\tconsole.log(\"\")\r\n}\r\nelse if (action === \"commands\") {\r\n\tconsole.log(\"\\n\\x1b[47m\\x1b[30m Stubber commands \\x1b[0m\\n\\n\")\r\n\tconsole.log(\"\\x1b[47m\\x1b[30m help \\x1b[0m - A short description of how to instantiate and use the stubber. Accepts an second argument of the stub name, and return it's description\\n\")\r\n\tconsole.log(\"\\x1b[47m\\x1b[30m commands \\x1b[0m - displays this text of list of commands\\n\")\r\n\tconsole.log(\"\\x1b[47m\\x1b[30m spawn \\x1b[0m - receives a required argument of the name of the stub to use\\n\")\r\n\tconsole.log(\"\\x1b[47m\\x1b[30m list \\x1b[0m - list all available stubs to spawn\\n\")\r\n}\r\nelse if (action === \"help\") {\r\n\tconsole.log(\"\\n\\x1b[47m\\x1b[30m Stubber help \\x1b[0m\\n\\n\")\r\n\r\n\tconsole.log(\"Creating your stubs\\n\")\r\n\tconsole.log(\"By any way this is a complete guide, just a quickstart, you can read more in https://github.com/AcaiFramework/stubber\")\r\n\tconsole.log(\"To create your stubs, the first thing you will need is a directory to them. Stubber defaults to `/stubs`, but you can overwrite it using `--stubDir=/path/to/dir`, each folder inside of it will be considered a different stub, and all of them require a file called `stub.config.json`, where it's name and identifier can be found.\")\r\n\tconsole.log(\"You need two keys: name and targetPath, that's where the stub will be place when called. Behaviour that you can overwrite using `--target=/new/path`, every other file inside of the stub, will be copied to the target path, meaning you can write variables inside of them.\")\r\n\tconsole.log(\"To declare those variables, you will enclose them within double brackets, like this: `{{ variableName }}`, there are many types of variables and you can read about them in our documentation. The variable name defaults to the name you give your stub.\")\r\n\r\n\tconsole.log(\"\\nUsing them\\n\")\r\n\tconsole.log(\"You can call this package within your terminal, we recommend saving it in your package.json, so you can alias it to a smaller form. Let's say for example you have a stub called Component and wants to use it, just call: `yarn stub spawn Component MyComponent` and there you have it.\")\r\n\tconsole.log(\"\")\r\n}\r\nelse if (action === \"list\") {\r\n\tconsole.log(\"\\n\\x1b[47m\\x1b[30m List of available stubs \\x1b[0m\")\r\n\tconsole.log(\"You can read more with command help {stubName}\")\r\n\r\n\tlistStubs((args.find(i => i.match(\"--stubDir=\")) || \"--stubDir=/stubs\").replace(\"--stubDir=\", \"\"))\r\n\r\n\tconsole.log(\"\")\r\n}\r\nelse if (action === \"spawn\") {\r\n\tif (args.length < 2) {\r\n\t\tthrow \"Not enough arguments to spawn the required stub\"\r\n\t}\r\n\r\n\tconsole.log(`\\nSpawning stub ${args[0]}`)\r\n\r\n\tconst stubber = new Stubber(args, (args.find(i => i.match(\"--stubDir=\")) || \"--stubDir=/stubs\").replace(\"--stubDir=\", \"\"))\r\n\tstubber.copy()\r\n\tstubber.inject()\r\n\r\n\tconsole.log(\"\")\r\n}\r\nelse {\r\n\tthrow \"Command not found, see list of commands to see all available options\"\r\n}"],"names":["args2","variables","stub","name","splice","forEach","name2","value","item","split","stubName","stubArgs","stubFilesPath","stubpath","join","process","cwd","existsSync","Error","lstatSync","isDirectory","stubsAvailable","readdirSync","withFileTypes","filter","i","length","configFilePath","parse","readFileSync","encoding","e","constructor","overwriteTargetPath","join2","existsSync2","lstatSync2","readdirSync2","callArgs","parseArgs","stubs","getStubs","config","JSON","readFileSync2","this","stubConfig","stubOriginPath","replace","stubFileContent","glob","sync","nodir","targetPath","copy","shouldBeRenamed","renameToNameFiles","find","relativepath","targetfinalpath","pathfile","substring","lastIndexOf","mkdirSync","recursive","copyFileSync","inject","extraVariables","allVariables","content","match","varname","variable","trim","varvalue","log","RegExp","writeFileSync","join3","readFileSync3","description","action","args","argv","stubber","Stubber"],"mappings":"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"}